## ./components.json
```
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "./src/styles/globals.css",
    "baseColor": "slate",
    "cssVariables": true
  },
  "aliases": {
    "components": "~/app/_components",
    "utils": "~/app/lib/utils"
  }
}
```
## ./src/env.mjs
```
import { createEnv } from "@t3-oss/env-nextjs";
import { z } from "zod";

export const env = createEnv({
  /**
   * Specify your server-side environment variables schema here. This way you can ensure the app
   * isn't built with invalid env vars.
   */
  server: {
    DATABASE_URL: z
      .string()
      .url()
      .refine(
        (str) => !str.includes("YOUR_MYSQL_URL_HERE"),
        "You forgot to change the default URL",
      ),
    NODE_ENV: z
      .enum(["development", "test", "production"])
      .default("development"),
    NEXTAUTH_SECRET:
      process.env.NODE_ENV === "production"
        ? z.string()
        : z.string().optional(),
    NEXTAUTH_JWT_SECRET:
      process.env.NODE_ENV === "production"
        ? z.string()
        : z.string().optional(),
    NEXTAUTH_URL: z.preprocess(
      // This makes Vercel deployments not fail if you don't set NEXTAUTH_URL
      // Since NextAuth.js automatically uses the VERCEL_URL if present.
      (str) => process.env.VERCEL_URL ?? str,
      // VERCEL_URL doesn't include `https` so it cant be validated as a URL
      process.env.VERCEL ? z.string() : z.string().url(),
    ),

    // Add ` on ID and SECRET if you want to make sure they're not empty
    GITHUB_CLIENT_ID: z.string(),
    GITHUB_CLIENT_SECRET: z.string(),
  },

  /**
   * Specify your client-side environment variables schema here. This way you can ensure the app
   * isn't built with invalid env vars. To expose them to the client, prefix them with
   * `NEXT_PUBLIC_`.
   */
  client: {
    // NEXT_PUBLIC_CLIENTVAR: z.string(),
  },

  /**
   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.
   * middlewares) or client-side so we need to destruct manually.
   */
  runtimeEnv: {
    DATABASE_URL: process.env.DATABASE_URL,
    NODE_ENV: process.env.NODE_ENV,
    NEXTAUTH_SECRET: process.env.NEXTAUTH_SECRET,
    NEXTAUTH_JWT_SECRET: process.env.NEXTAUTH_JWT_SECRET,
    NEXTAUTH_URL: process.env.NEXTAUTH_URL,
    GITHUB_CLIENT_ID: process.env.GITHUB_CLIENT_ID,
    GITHUB_CLIENT_SECRET: process.env.GITHUB_CLIENT_SECRET,
  },
  /**
   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially
   * useful for Docker builds.
   */
  skipValidation: !!process.env.SKIP_ENV_VALIDATION,
  /**
   * Makes it so that empty strings are treated as undefined.
   * `SOME_VAR: z.string()` and `SOME_VAR=''` will throw an error.
   */
  emptyStringAsUndefined: true,
});
```
## ./src/styles/globals.css
```
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
```
## ./src/app/hooks/useAuth.tsx
```
// hooks/useAuth.tsx
import { useState, useEffect } from "react";
import { useRouter } from "next/router";

export function useAuth() {
  const [user, setUser] = useState(null);
  const router = useRouter();

  useEffect(() => {
    // Check authentication status
    const checkAuth = async () => {
      try {
        const response = await fetch("/api/auth/me");
        if (response.ok) {
          const userData = await response.json();
          setUser(userData);
        } else {
          setUser(null);
        }
      } catch (error) {
        console.error("Error checking authentication:", error);
        setUser(null);
      }
    };

    checkAuth();
  }, []);

  const login = async (credentials) => {
    try {
      const response = await fetch("/api/auth/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(credentials),
      });

      if (response.ok) {
        const userData = await response.json();
        setUser(userData);
        router.push("/dashboard");
      } else {
        throw new Error("Login failed");
      }
    } catch (error) {
      console.error("Login error:", error);
      throw error;
    }
  };

  const logout = async () => {
    try {
      await fetch("/api/auth/logout", { method: "POST" });
      setUser(null);
      router.push("/");
    } catch (error) {
      console.error("Logout error:", error);
    }
  };

  const signUp = async (userData) => {
    try {
      const response = await fetch("/api/auth/signup", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(userData),
      });

      if (response.ok) {
        const newUser = await response.json();
        setUser(newUser);
        router.push("/dashboard");
      } else {
        throw new Error("Signup failed");
      }
    } catch (error) {
      console.error("Signup error:", error);
      throw error;
    }
  };

  const updateUser = async (userData) => {
    try {
      const response = await fetch("/api/user/update", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(userData),
      });

      if (response.ok) {
        const updatedUser = await response.json();
        setUser(updatedUser);
      } else {
        throw new Error("User update failed");
      }
    } catch (error) {
      console.error("User update error:", error);
      throw error;
    }
  };

  return { user, login, logout, signUp, updateUser };
}
```
## ./src/app/lib/utils.ts
```
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
 
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
```
## ./src/app/page.tsx
```
// src/app/page.tsx
import Link from "next/link";
import { Button } from "~/components/ui/button";

export default function Home() {
  return (
    <div className="flex min-h-screen flex-col items-center justify-center py-2">
      <h1 className="mb-8 text-4xl font-bold">Welcome to MyAmble</h1>
      <p className="mb-8 max-w-2xl text-center text-xl">
        Empowering social work research through innovative surveys and data
        analysis. Join our platform to create, distribute, and analyze surveys
        with ease.
      </p>
      <div className="flex space-x-4">
        <Link href="/login">
          <Button>Login</Button>
        </Link>
        <Link href="/sign-up">
          <Button variant="outline">Sign Up</Button>
        </Link>
      </div>
    </div>
  );
}
```
## ./src/app/api/auth/[...nextauth]/route.ts
```
import NextAuth from "next-auth";

import { authOptions } from "~/server/auth";

// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };
```
## ./src/app/api/trpc/[trpc]/route.ts
```
import { fetchRequestHandler } from "@trpc/server/adapters/fetch";
import { type NextRequest } from "next/server";

import { env } from "~/env.mjs";
import { appRouter } from "~/server/api/root";
import { createTRPCContext } from "~/server/api/trpc";

const handler = (req: NextRequest) =>
  fetchRequestHandler({
    endpoint: "/api/trpc",
    req,
    router: appRouter,
    createContext: () => createTRPCContext({ req }),
    onError:
      env.NODE_ENV === "development"
        ? ({ path, error }) => {
            console.error(
              `‚ùå tRPC failed on ${path ?? "<no-path>"}: ${error.message}`
            );
          }
        : undefined,
  });

export { handler as GET, handler as POST };
```
## ./src/app/layout.tsx
```
import "~/styles/globals.css";

import { Inter } from "next/font/google";
import { cookies } from "next/headers";

import { TRPCReactProvider } from "~/trpc/react";
import { Providers } from "./Theme/Providers";
import SideMenu from "./_components/ui/SideMenu/sidemenu";

const inter = Inter({
  subsets: ["latin"],
  variable: "--font-sans",
});

export const metadata = {
  title: "Create T3 App",
  description: "Generated by create-t3-app",
  icons: [{ rel: "icon", url: "/favicon.ico" }],
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={`font-sans ${inter.variable}`}>
        <TRPCReactProvider cookies={cookies().toString()}>
          <Providers>
            {children}
            <SideMenu />
          </Providers>
        </TRPCReactProvider>
      </body>
    </html>
  );
}
```
## ./src/app/(pages)/survey/page.tsx
```

```
## ./src/app/(pages)/survey/Survey.module.css
```

```
## ./src/app/(pages)/(misc)/help/page.tsx
```
// src/app/(pages)/(misc)/help/page.tsx
export default function Help() {
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="mb-6 text-3xl font-bold">Help Center</h1>
      <div className="space-y-6">
        <section>
          <h2 className="mb-3 text-2xl font-semibold">
            Frequently Asked Questions
          </h2>
          <div className="space-y-4">
            <div>
              <h3 className="mb-2 text-lg font-medium">
                How do I create a survey?
              </h3>
              <p>
                To create a survey, log in to your account, navigate to the
                Survey Builder page, and follow the step-by-step guide to design
                your survey.
              </p>
            </div>
            <div>
              <h3 className="mb-2 text-lg font-medium">
                Can I collaborate with other researchers?
              </h3>
              <p>
                Yes, MyAmble supports collaboration. You can invite other
                researchers to view or edit your surveys from the Survey Builder
                page.
              </p>
            </div>
            <div>
              <h3 className="mb-2 text-lg font-medium">
                How secure is my data?
              </h3>
              <p>
                We take data security seriously. All data is encrypted in
                transit and at rest, and we follow industry best practices for
                data protection.
              </p>
            </div>
          </div>
        </section>
        <section>
          <h2 className="mb-3 text-2xl font-semibold">Getting Started Guide</h2>
          <ol className="list-inside list-decimal space-y-2">
            <li>Sign up for an account</li>
            <li>Verify your email address</li>
            <li>Log in to your dashboard</li>
            <li>Create your first survey using the Survey Builder</li>
            <li>Distribute your survey to participants</li>
            <li>Analyze results using our built-in tools and AI insights</li>
          </ol>
        </section>
        <section>
          <h2 className="mb-3 text-2xl font-semibold">Contact Support</h2>
          <p>
            If you need further assistance, please don't hesitate to contact our
            support team at{" "}
            <a
              href="mailto:support@myamble.com"
              className="text-blue-600 hover:underline"
            >
              support@myamble.com
            </a>
            .
          </p>
        </section>
      </div>
    </div>
  );
}
```
## ./src/app/(pages)/(misc)/help/Help.module.css
```

```
## ./src/app/(pages)/(misc)/privacy/page.tsx
```
// src/app/(pages)/(misc)/privacy/page.tsx
export default function Privacy() {
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="mb-6 text-3xl font-bold">Privacy Policy</h1>
      <p className="mb-4">Last updated: [Current Date]</p>
      <div className="space-y-6">
        <section>
          <h2 className="mb-3 text-2xl font-semibold">
            1. Information We Collect
          </h2>
          <p>
            We collect information you provide directly to us, such as when you
            create an account, respond to a survey, or contact us for support.
            This may include your name, email address, and any other information
            you choose to provide.
          </p>
        </section>
        <section>
          <h2 className="mb-3 text-2xl font-semibold">
            2. How We Use Your Information
          </h2>
          <p>
            We use the information we collect to provide, maintain, and improve
            our services, to communicate with you, and to comply with legal
            obligations.
          </p>
        </section>
        <section>
          <h2 className="mb-3 text-2xl font-semibold">3. Data Security</h2>
          <p>
            We implement appropriate technical and organizational measures to
            protect the security of your personal information.
          </p>
        </section>
        <section>
          <h2 className="mb-3 text-2xl font-semibold">4. Your Rights</h2>
          <p>
            You have the right to access, correct, or delete your personal
            information. You may also have the right to restrict or object to
            certain processing of your data.
          </p>
        </section>
        <section>
          <h2 className="mb-3 text-2xl font-semibold">
            5. Changes to This Policy
          </h2>
          <p>
            We may update this privacy policy from time to time. We will notify
            you of any changes by posting the new policy on this page.
          </p>
        </section>
        <section>
          <h2 className="mb-3 text-2xl font-semibold">6. Contact Us</h2>
          <p>
            If you have any questions about this privacy policy, please contact
            us at{" "}
            <a
              href="mailto:privacy@myamble.com"
              className="text-blue-600 hover:underline"
            >
              privacy@myamble.com
            </a>
            .
          </p>
        </section>
      </div>
    </div>
  );
}
```
## ./src/app/(pages)/(misc)/privacy/Privacy.module.css
```

```
## ./src/app/(pages)/(misc)/about/page.tsx
```
// src/app/(pages)/(misc)/about/page.tsx
export default function About() {
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="mb-6 text-3xl font-bold">About MyAmble</h1>
      <p className="mb-4">
        MyAmble is a cutting-edge platform designed to revolutionize social work
        research and practice. Our mission is to empower social workers and
        researchers with powerful tools for creating, distributing, and
        analyzing surveys.
      </p>
      <p className="mb-4">
        Founded in 2023, MyAmble combines the latest in survey technology with
        advanced data analysis capabilities, including AI-powered insights.
        We're committed to improving the efficiency and effectiveness of social
        work research, ultimately contributing to better outcomes for
        communities and individuals.
      </p>
      <h2 className="mb-4 mt-6 text-2xl font-semibold">Our Team</h2>
      <p className="mb-4">
        MyAmble is brought to you by a dedicated team of social work
        professionals, software engineers, and data scientists. Together, we're
        working to bridge the gap between technology and social work practice.
      </p>
      <h2 className="mb-4 mt-6 text-2xl font-semibold">Contact Us</h2>
      <p>
        For any inquiries or support, please reach out to us at{" "}
        <a
          href="mailto:support@myamble.com"
          className="text-blue-600 hover:underline"
        >
          support@myamble.com
        </a>
        .
      </p>
    </div>
  );
}
```
## ./src/app/(pages)/(misc)/about/About.module.css
```

```
## ./src/app/(pages)/(admin)/user-management/User-management.module.css
```

```
## ./src/app/(pages)/(admin)/user-management/page.tsx
```
// src/app/(pages)/(admin)/user-management/page.tsx
"use client";

import { useState, useEffect } from "react";
import { DataTable } from "~/components/ui/data-table";
import { Button } from "~/components/ui/button";
import { Input } from "~/components/ui/input";

export default function UserManagement() {
  const [users, setUsers] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");

  useEffect(() => {
    fetchUsers();
  }, []);

  const fetchUsers = async () => {
    try {
      const response = await fetch("/api/users");
      if (response.ok) {
        const data = await response.json();
        setUsers(data);
      }
    } catch (error) {
      console.error("Error fetching users:", error);
    }
  };

  const columns = [
    { accessorKey: "name", header: "Name" },
    { accessorKey: "email", header: "Email" },
    { accessorKey: "role", header: "Role" },
    {
      id: "actions",
      cell: ({ row }) => (
        <Button onClick={() => handleEditUser(row.original)}>Edit</Button>
      ),
    },
  ];

  const handleEditUser = (user) => {
    // Implement edit user functionality
    console.log("Edit user:", user);
  };

  const filteredUsers = users.filter(
    (user) =>
      user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      user.email.toLowerCase().includes(searchTerm.toLowerCase()),
  );

  return (
    <div className="container mx-auto px-4">
      <h1 className="mb-4 text-2xl font-bold">User Management</h1>
      <Input
        type="text"
        placeholder="Search users..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        className="mb-4"
      />
      <DataTable columns={columns} data={filteredUsers} />
    </div>
  );
}
```
## ./src/app/(pages)/(admin)/myamble-ai/page.tsx
```
// src/app/(pages)/(admin)/myamble-ai/page.tsx
"use client";

import { useState } from "react";
import { Button } from "~/components/ui/button";
import { Textarea } from "~/components/ui/textarea";

export default function MyAmbleAI() {
  const [query, setQuery] = useState("");
  const [results, setResults] = useState(null);
  const [loading, setLoading] = useState(false);

  const handleAnalysis = async () => {
    if (!query.trim()) return;

    setLoading(true);
    try {
      const response = await fetch("/api/myamble-ai", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ query }),
      });

      if (response.ok) {
        const data = await response.json();
        setResults(data);
      } else {
        throw new Error("Failed to perform analysis");
      }
    } catch (error) {
      console.error("Error performing analysis:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container mx-auto px-4">
      <h1 className="mb-4 text-2xl font-bold">MyAmble AI</h1>
      <Textarea
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        placeholder="Enter your analysis query..."
        className="mb-4"
        rows={4}
      />
      <Button onClick={handleAnalysis} disabled={loading}>
        {loading ? "Analyzing..." : "Analyze"}
      </Button>
      {results && (
        <div className="mt-8">
          <h2 className="mb-2 text-xl font-bold">Analysis Results:</h2>
          <pre className="overflow-x-auto rounded bg-gray-100 p-4">
            {JSON.stringify(results, null, 2)}
          </pre>
        </div>
      )}
    </div>
  );
}
```
## ./src/app/(pages)/(admin)/myamble-ai/Myamble-ai.module.css
```

```
## ./src/app/(pages)/(admin)/survey-builder/page.tsx
```
// src/app/(pages)/(admin)/survey-builder/page.tsx
"use client";

import { useState } from "react";
import { SurveyCreatorComponent, SurveyCreator } from "survey-creator-react";
import "survey-core/defaultV2.min.css";
import "survey-creator-core/survey-creator-core.min.css";
import { api } from "~/trpc/react";

export default function SurveyBuilder() {
  const [creator] = useState(() => new SurveyCreator());
  const createSurveyMutation = api.survey.create.useMutation();

  const saveSurvey = async (
    saveNo: number,
    callback: (no: number, isSuccess: boolean) => void,
  ) => {
    const surveyJson = creator.JSON;
    try {
      await createSurveyMutation.mutateAsync({
        title: surveyJson.title,
        description: surveyJson.description,
        data: surveyJson,
      });
      callback(saveNo, true);
    } catch (error) {
      console.error("Error saving survey:", error);
      callback(saveNo, false);
    }
  };

  creator.saveSurveyFunc = saveSurvey;

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="mb-4 text-2xl font-bold">Survey Builder</h1>
      <SurveyCreatorComponent creator={creator} />
    </div>
  );
}
```
## ./src/app/(pages)/(admin)/dashboard/Dashboard.module.css
```

```
## ./src/app/(pages)/(admin)/dashboard/page.tsx
```
// src/app/(pages)/(admin)/dashboard/page.tsx
"use client";

import { useAuth } from "@/hooks/useAuth";
import { useEffect, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function Dashboard() {
  const { user } = useAuth();
  const [dashboardData, setDashboardData] = useState(null);

  useEffect(() => {
    const fetchDashboardData = async () => {
      try {
        const response = await fetch("/api/dashboard");
        if (response.ok) {
          const data = await response.json();
          setDashboardData(data);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      }
    };

    if (user) {
      fetchDashboardData();
    }
  }, [user]);

  if (!user) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      <h1 className="mb-4 text-2xl font-bold">Welcome, {user.name}</h1>
      {dashboardData && (
        <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
          <Card>
            <CardHeader>
              <CardTitle>Total Surveys</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-3xl font-bold">{dashboardData.totalSurveys}</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Active Participants</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-3xl font-bold">
                {dashboardData.activeParticipants}
              </p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Completed Surveys</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-3xl font-bold">
                {dashboardData.completedSurveys}
              </p>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}
```
## ./src/app/(pages)/(normal)/home/page.tsx
```
// src/app/(pages)/(normal)/home/page.tsx
import Link from "next/link";
import { Button } from "@/components/ui/button";

export default function Home() {
  return (
    <div className="flex min-h-screen flex-col items-center justify-center py-2">
      <h1 className="mb-8 text-4xl font-bold">Welcome to MyAmble</h1>
      <p className="mb-8 max-w-2xl text-center text-xl">
        Empowering social work research through innovative surveys and data
        analysis. Join our platform to create, distribute, and analyze surveys
        with ease.
      </p>
      <div className="flex space-x-4">
        <Link href="/login">
          <Button>Login</Button>
        </Link>
        <Link href="/sign-up">
          <Button variant="outline">Sign Up</Button>
        </Link>
      </div>
    </div>
  );
}
```
## ./src/app/(pages)/(normal)/home/Home.module.css
```

```
## ./src/app/(pages)/messenger/page.tsx
```
// src/app/(pages)/messenger/page.tsx
"use client";

import { useState, useEffect } from "react";
import { useAuth } from "~/hooks/useAuth";
import { Input } from "~/components/ui/input";
import { Button } from "~/components/ui/button";

export default function Messenger() {
  const { user } = useAuth();
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");

  useEffect(() => {
    if (user) {
      fetchMessages();
    }
  }, [user]);

  const fetchMessages = async () => {
    try {
      const response = await fetch("/api/messages");
      if (response.ok) {
        const data = await response.json();
        setMessages(data);
      }
    } catch (error) {
      console.error("Error fetching messages:", error);
    }
  };

  const sendMessage = async () => {
    if (!newMessage.trim()) return;

    try {
      const response = await fetch("/api/messages", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ content: newMessage, userId: user.id }),
      });

      if (response.ok) {
        setNewMessage("");
        fetchMessages();
      }
    } catch (error) {
      console.error("Error sending message:", error);
    }
  };

  return (
    <div className="container mx-auto px-4">
      <h1 className="mb-4 text-2xl font-bold">Messenger</h1>
      <div className="mb-4 rounded bg-white px-8 pb-8 pt-6 shadow-md">
        <div className="mb-4 h-64 overflow-y-auto">
          {messages.map((message) => (
            <div key={message.id} className="mb-2">
              <strong>{message.user.name}:</strong> {message.content}
            </div>
          ))}
        </div>
        <div className="flex">
          <Input
            type="text"
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            placeholder="Type a message..."
            className="mr-2 flex-grow"
          />
          <Button onClick={sendMessage}>Send</Button>
        </div>
      </div>
    </div>
  );
}
```
## ./src/app/(pages)/messenger/Messenger.module.css
```

```
## ./src/app/(pages)/(account)/sign-up/page.tsx
```
// src/app/(pages)/(account)/sign-up/page.tsx
"use client";

import { z } from "zod";
import { useAuth } from "@/hooks/useAuth";
import CustomForm from "@/components/Form";
import { useState } from "react";
import { Alert, AlertDescription } from "@/components/ui/alert";

const signUpSchema = z.object({
  name: z.string().min(2, "Name must be at least 2 characters"),
  email: z.string().email("Invalid email address"),
  password: z.string().min(8, "Password must be at least 8 characters"),
  role: z.enum(["SOCIAL_WORKER", "PARTICIPANT"], {
    required_error: "Please select a role",
  }),
});

export default function SignUp() {
  const { signUp } = useAuth();
  const [error, setError] = useState("");

  const handleSignUp = async (data) => {
    try {
      await signUp(data);
    } catch (err) {
      setError("An error occurred during sign up. Please try again.");
    }
  };

  return (
    <div className="mx-auto mt-8 max-w-md">
      <h1 className="mb-4 text-2xl font-bold">Sign Up</h1>
      {error && (
        <Alert variant="destructive" className="mb-4">
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
      <CustomForm
        fields={[
          { name: "name", label: "Name", type: "text" },
          { name: "email", label: "Email", type: "email" },
          { name: "password", label: "Password", type: "password" },
          {
            name: "role",
            label: "Role",
            type: "select",
            options: [
              { value: "SOCIAL_WORKER", label: "Social Worker" },
              { value: "PARTICIPANT", label: "Participant" },
            ],
          },
        ]}
        onSubmit={handleSignUp}
        validationSchema={signUpSchema}
      />
    </div>
  );
}
```
## ./src/app/(pages)/(account)/sign-up/Sign-up.module.css
```

```
## ./src/app/(pages)/(account)/account/page.tsx
```
// src/app/(pages)/(account)/account/page.tsx
"use client";

import { z } from "zod";
import { useAuth } from "~/hooks/useAuth";
import CustomForm from "~/components/Form";
import { useState } from "react";
import { Alert, AlertDescription } from "~/components/ui/alert";

const accountSchema = z.object({
  name: z.string().min(2, "Name must be at least 2 characters"),
  email: z.string().email("Invalid email address"),
});

export default function Account() {
  const { user, updateUser } = useAuth();
  const [message, setMessage] = useState({ type: "", content: "" });

  const handleUpdateProfile = async (data) => {
    try {
      await updateUser(data);
      setMessage({ type: "success", content: "Profile updated successfully" });
    } catch (err) {
      setMessage({ type: "error", content: "Failed to update profile" });
    }
  };

  if (!user) return <div>Loading...</div>;

  return (
    <div className="mx-auto mt-8 max-w-md">
      <h1 className="mb-4 text-2xl font-bold">Account Settings</h1>
      {message.content && (
        <Alert
          variant={message.type === "error" ? "destructive" : "default"}
          className="mb-4"
        >
          <AlertDescription>{message.content}</AlertDescription>
        </Alert>
      )}
      <CustomForm
        fields={[
          {
            name: "name",
            label: "Name",
            type: "text",
            defaultValue: user.name,
          },
          {
            name: "email",
            label: "Email",
            type: "email",
            defaultValue: user.email,
          },
        ]}
        onSubmit={handleUpdateProfile}
        validationSchema={accountSchema}
      />
    </div>
  );
}
```
## ./src/app/(pages)/(account)/account/Account.module.css
```

```
## ./src/app/(pages)/(account)/forgot-password/page.tsx
```

```
## ./src/app/(pages)/(account)/forgot-password/Forgot-password.module.css
```

```
## ./src/app/(pages)/(account)/login/page.tsx
```
// src/app/(pages)/(account)/login/page.tsx
"use client";

import { z } from "zod";
import { useAuth } from "@/hooks/useAuth";
import CustomForm from "@/components/Form";
import { useState } from "react";
import { Alert, AlertDescription } from "@/components/ui/alert";

const loginSchema = z.object({
  email: z.string().email("Invalid email address"),
  password: z.string().min(8, "Password must be at least 8 characters"),
});

export default function Login() {
  const { login } = useAuth();
  const [error, setError] = useState("");

  const handleLogin = async (data) => {
    try {
      await login(data);
    } catch (err) {
      setError("Invalid email or password. Please try again.");
    }
  };

  return (
    <div className="mx-auto mt-8 max-w-md">
      <h1 className="mb-4 text-2xl font-bold">Login</h1>
      {error && (
        <Alert variant="destructive" className="mb-4">
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
      <CustomForm
        fields={[
          { name: "email", label: "Email", type: "email" },
          { name: "password", label: "Password", type: "password" },
        ]}
        onSubmit={handleLogin}
        validationSchema={loginSchema}
      />
    </div>
  );
}
```
## ./src/app/(pages)/(account)/login/Login.module.css
```

```
## ./src/app/(pages)/(account)/reset-password/page.tsx
```
// src/app/(pages)/(account)/reset-password/page.tsx
"use client";

import { useState } from "react";
import { useSearchParams } from "next/navigation";
import { z } from "zod";
import CustomForm from "~/components/Form";
import { Alert, AlertDescription } from "~/components/ui/alert";

const resetPasswordSchema = z
  .object({
    password: z.string().min(8, "Password must be at least 8 characters"),
    confirmPassword: z
      .string()
      .min(8, "Password must be at least 8 characters"),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "Passwords don't match",
    path: ["confirmPassword"],
  });

export default function ResetPassword() {
  const [status, setStatus] = useState<"idle" | "success" | "error">("idle");
  const searchParams = useSearchParams();
  const token = searchParams.get("token");

  const handleResetPassword = async (data) => {
    if (!token) {
      setStatus("error");
      return;
    }

    try {
      const response = await fetch("/api/auth/reset-password", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ token, password: data.password }),
      });

      if (response.ok) {
        setStatus("success");
      } else {
        setStatus("error");
      }
    } catch (error) {
      console.error("Error resetting password:", error);
      setStatus("error");
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="mb-6 text-3xl font-bold">Reset Password</h1>
      {status === "idle" && (
        <CustomForm
          fields={[
            { name: "password", label: "New Password", type: "password" },
            {
              name: "confirmPassword",
              label: "Confirm New Password",
              type: "password",
            },
          ]}
          onSubmit={handleResetPassword}
          validationSchema={resetPasswordSchema}
        />
      )}
      {status === "success" && (
        <Alert>
          <AlertDescription>
            Your password has been successfully reset. You can now log in with
            your new password.
          </AlertDescription>
        </Alert>
      )}
      {status === "error" && (
        <Alert variant="destructive">
          <AlertDescription>
            Failed to reset your password. The reset link may be invalid or
            expired. Please request a new password reset.
          </AlertDescription>
        </Alert>
      )}
    </div>
  );
}
```
## ./src/app/(pages)/(account)/reset-password/Reset-password.module.css
```

```
## ./src/app/(pages)/(account)/verify-email/Verify-email.module.css
```

```
## ./src/app/(pages)/(account)/verify-email/page.tsx
```
// src/app/(pages)/(account)/verify-email/page.tsx
"use client";

import { useState, useEffect } from "react";
import { useSearchParams } from "next/navigation";
import { Alert, AlertDescription } from "~/components/ui/alert";
import { Button } from "~/components/ui/button";

export default function VerifyEmail() {
  const [status, setStatus] = useState<"loading" | "success" | "error">(
    "loading",
  );
  const searchParams = useSearchParams();
  const token = searchParams.get("token");

  useEffect(() => {
    const verifyEmail = async () => {
      if (!token) {
        setStatus("error");
        return;
      }

      try {
        const response = await fetch("/api/auth/verify-email", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ token }),
        });

        if (response.ok) {
          setStatus("success");
        } else {
          setStatus("error");
        }
      } catch (error) {
        console.error("Error verifying email:", error);
        setStatus("error");
      }
    };

    verifyEmail();
  }, [token]);

  const resendVerification = async () => {
    try {
      const response = await fetch("/api/auth/resend-verification", {
        method: "POST",
      });

      if (response.ok) {
        alert("Verification email sent. Please check your inbox.");
      } else {
        throw new Error("Failed to resend verification email");
      }
    } catch (error) {
      console.error("Error resending verification:", error);
      alert("Failed to resend verification email. Please try again later.");
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="mb-6 text-3xl font-bold">Email Verification</h1>
      {status === "loading" && <p>Verifying your email...</p>}
      {status === "success" && (
        <Alert>
          <AlertDescription>
            Your email has been successfully verified. You can now log in to
            your account.
          </AlertDescription>
        </Alert>
      )}
      {status === "error" && (
        <div>
          <Alert variant="destructive">
            <AlertDescription>
              Failed to verify your email. The verification link may be invalid
              or expired.
            </AlertDescription>
          </Alert>
          <Button onClick={resendVerification} className="mt-4">
            Resend Verification Email
          </Button>
        </div>
      )}
    </div>
  );
}
```
## ./src/app/Theme/Providers.tsx
```
"use client";
import { ThemeProvider } from "next-themes";
import { type ReactNode } from "react";

export function Providers({ children }: { children: ReactNode }) {
  return (
    <ThemeProvider enableSystem={true} attribute="class" defaultTheme="system">
      {children}
    </ThemeProvider>
  );
}
```
## ./src/app/_components/Layout.tsx
```
import "~/styles/globals.css";

import { Inter } from "next/font/google";
import { cookies } from "next/headers";

import { TRPCReactProvider } from "~/trpc/react";
import { Providers } from "./Theme/Providers";
import SideMenu from "./_components/ui/SideMenu/sidemenu";

const inter = Inter({
  subsets: ["latin"],
  variable: "--font-sans",
});

export const metadata = {
  title: "Create T3 App",
  description: "Generated by create-t3-app",
  icons: [{ rel: "icon", url: "/favicon.ico" }],
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={`font-sans ${inter.variable}`}>
        <TRPCReactProvider cookies={cookies().toString()}>
          <Providers>
            {children}
            <SideMenu />
          </Providers>
        </TRPCReactProvider>
      </body>
    </html>
  );
}
```
## ./src/app/_components/ui/menubar.tsx
```
"use client";

import * as React from "react";
import {
  CheckIcon,
  ChevronRightIcon,
  DotFilledIcon,
} from "@radix-ui/react-icons";
import * as MenubarPrimitive from "@radix-ui/react-menubar";

import { cn } from "~/app/lib/utils";

const MenubarMenu = MenubarPrimitive.Menu;

const MenubarGroup = MenubarPrimitive.Group;

const MenubarPortal = MenubarPrimitive.Portal;

const MenubarSub = MenubarPrimitive.Sub;

const MenubarRadioGroup = MenubarPrimitive.RadioGroup;

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm",
      className,
    )}
    {...props}
  />
));
Menubar.displayName = MenubarPrimitive.Root.displayName;

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className,
    )}
    {...props}
  />
));
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName;

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
));
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName;

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName;

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref,
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className,
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  ),
);
MenubarContent.displayName = MenubarPrimitive.Content.displayName;

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
MenubarItem.displayName = MenubarPrimitive.Item.displayName;

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
));
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName;

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <DotFilledIcon className="h-4 w-4 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
));
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName;

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
MenubarLabel.displayName = MenubarPrimitive.Label.displayName;

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName;

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className,
      )}
      {...props}
    />
  );
};
MenubarShortcut.displayname = "MenubarShortcut";

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
};

// src/app/_components/ui/menubar.tsx
import Link from "next/link";
import { useAuth } from "@/hooks/useAuth";
import { ThemeToggle } from "./ThemeToggle";

export function MenuBar() {
  const { user, logout } = useAuth();

  return (
    <header className="supports-backdrop-blur:bg-background/60 sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur">
      <div className="container flex h-14 items-center justify-between">
        <Link href="/" className="flex items-center space-x-2">
          <span className="text-xl font-bold">MyAmble</span>
        </Link>
        <nav className="flex items-center space-x-6 text-sm font-medium">
          {user ? (
            <>
              <Link href="/dashboard">Dashboard</Link>
              <Link href="/account">Account</Link>
              <button onClick={logout} className="text-red-500">
                Logout
              </button>
            </>
          ) : (
            <>
              <Link href="/login">Login</Link>
              <Link href="/sign-up">Sign Up</Link>
            </>
          )}
          <ThemeToggle />
        </nav>
      </div>
    </header>
  );
}
```
## ./src/app/_components/ui/SideMenu/sidemenu.tsx
```
"use client";

import React from "react";
import {
  Menubar,
  MenubarContent,
  MenubarItem,
  MenubarMenu,
  MenubarSeparator,
  MenubarShortcut,
  MenubarTrigger,
} from "~/app/_components/ui/menubar";
import { useTheme } from "next-themes";
import { cn } from "~/app/lib/utils";

export default function SideMenu() {
  const { theme, setTheme } = useTheme();
  return (
    <Menubar className="fixed bottom-3/4 right-0 w-20 cursor-pointer">
      <MenubarMenu>
        <MenubarTrigger className="cursor-pointer transition-colors duration-700 hover:bg-slate-300">
          Theme
        </MenubarTrigger>
        <MenubarContent>
          <MenubarItem
            onClick={() => setTheme("dark")}
            className={cn(
              "flex cursor-pointer justify-center rounded-lg px-2 transition-colors duration-300",
              theme === "dark" && "group bg-slate-300 font-bold text-black",
            )}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              height="1em"
              viewBox="0 0 384 512"
              className="transition-colors duration-300 group-hover:invert"
            >
              <path d="M223.5 32C100 32 0 132.3 0 256S100 480 223.5 480c60.6 0 115.5-24.2 155.8-63.4c5-4.9 6.3-12.5 3.1-18.7s-10.1-9.7-17-8.5c-9.8 1.7-19.8 2.6-30.1 2.6c-96.9 0-175.5-78.8-175.5-176c0-65.8 36-123.1 89.3-153.3c6.1-3.5 9.2-10.5 7.7-17.3s-7.3-11.9-14.3-12.5c-6.3-.5-12.6-.8-19-.8z" />
            </svg>
          </MenubarItem>
          <MenubarSeparator />
          <MenubarItem
            onClick={() => setTheme("light")}
            className={cn(
              "flex cursor-pointer justify-center rounded-lg px-2 invert transition-colors duration-300",
              theme === "light" && "group bg-slate-300 font-bold text-black",
            )}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              height="1em"
              viewBox="0 0 512 512"
              className="transition-colors duration-300 "
            >
              <path d="M375.7 19.7c-1.5-8-6.9-14.7-14.4-17.8s-16.1-2.2-22.8 2.4L256 61.1 173.5 4.2c-6.7-4.6-15.3-5.5-22.8-2.4s-12.9 9.8-14.4 17.8l-18.1 98.5L19.7 136.3c-8 1.5-14.7 6.9-17.8 14.4s-2.2 16.1 2.4 22.8L61.1 256 4.2 338.5c-4.6 6.7-5.5 15.3-2.4 22.8s9.8 13 17.8 14.4l98.5 18.1 18.1 98.5c1.5 8 6.9 14.7 14.4 17.8s16.1 2.2 22.8-2.4L256 450.9l82.5 56.9c6.7 4.6 15.3 5.5 22.8 2.4s12.9-9.8 14.4-17.8l18.1-98.5 98.5-18.1c8-1.5 14.7-6.9 17.8-14.4s2.2-16.1-2.4-22.8L450.9 256l56.9-82.5c4.6-6.7 5.5-15.3 2.4-22.8s-9.8-12.9-17.8-14.4l-98.5-18.1L375.7 19.7zM269.6 110l65.6-45.2 14.4 78.3c1.8 9.8 9.5 17.5 19.3 19.3l78.3 14.4L402 242.4c-5.7 8.2-5.7 19 0 27.2l45.2 65.6-78.3 14.4c-9.8 1.8-17.5 9.5-19.3 19.3l-14.4 78.3L269.6 402c-8.2-5.7-19-5.7-27.2 0l-65.6 45.2-14.4-78.3c-1.8-9.8-9.5-17.5-19.3-19.3L64.8 335.2 110 269.6c5.7-8.2 5.7-19 0-27.2L64.8 176.8l78.3-14.4c9.8-1.8 17.5-9.5 19.3-19.3l14.4-78.3L242.4 110c8.2 5.7 19 5.7 27.2 0zM256 368a112 112 0 1 0 0-224 112 112 0 1 0 0 224zM192 256a64 64 0 1 1 128 0 64 64 0 1 1 -128 0z" />
            </svg>
          </MenubarItem>
        </MenubarContent>
      </MenubarMenu>
    </Menubar>
  );
}

// src/app/_components/ui/SideMenu/sidemenu.tsx
import Link from "next/link";
import { useAuth } from "@/hooks/useAuth";

export default function SideMenu() {
  const { user } = useAuth();

  if (!user) return null;

  return (
    <aside className="w-64 bg-gray-100 p-6">
      <nav>
        <ul className="space-y-2">
          <li>
            <Link href="/dashboard" className="hover:underline">
              Dashboard
            </Link>
          </li>
          {user.role === "SOCIAL_WORKER" && (
            <>
              <li>
                <Link href="/survey-builder" className="hover:underline">
                  Survey Builder
                </Link>
              </li>
              <li>
                <Link href="/user-management" className="hover:underline">
                  User Management
                </Link>
              </li>
            </>
          )}
          <li>
            <Link href="/messenger" className="hover:underline">
              Messenger
            </Link>
          </li>
          <li>
            <Link href="/myamble-ai" className="hover:underline">
              MyAmble AI
            </Link>
          </li>
        </ul>
      </nav>
    </aside>
  );
}
```
## ./src/app/_components/Sidemenu.tsx
```
// components/SideMenu.tsx
import Link from "next/link";
import { useAuth } from "@/hooks/useAuth";

export default function SideMenu() {
  const { user } = useAuth();

  if (!user) return null;

  return (
    <aside className="w-64 bg-gray-100 p-6">
      <nav>
        <ul className="space-y-2">
          <li>
            <Link href="/dashboard" className="hover:underline">
              Dashboard
            </Link>
          </li>
          {user.role === "SOCIAL_WORKER" && (
            <>
              <li>
                <Link href="/survey-builder" className="hover:underline">
                  Survey Builder
                </Link>
              </li>
              <li>
                <Link href="/user-management" className="hover:underline">
                  User Management
                </Link>
              </li>
            </>
          )}
          <li>
            <Link href="/messenger" className="hover:underline">
              Messenger
            </Link>
          </li>
          <li>
            <Link href="/myamble-ai" className="hover:underline">
              MyAmble AI
            </Link>
          </li>
        </ul>
      </nav>
    </aside>
  );
}
```
## ./src/app/_components/Header.tsx
```
// components/Header.tsx
import Link from "next/link";
import { ThemeToggle } from "./ThemeToggle";
import { useAuth } from "@/hooks/useAuth";

export default function Header() {
  const { user, logout } = useAuth();

  return (
    <header className="supports-backdrop-blur:bg-background/60 sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur">
      <div className="container flex h-14 items-center justify-between">
        <Link href="/" className="flex items-center space-x-2">
          <span className="text-xl font-bold">MyAmble</span>
        </Link>
        <nav className="flex items-center space-x-6 text-sm font-medium">
          {user ? (
            <>
              <Link href="/dashboard">Dashboard</Link>
              <Link href="/account">Account</Link>
              <button onClick={logout} className="text-red-500">
                Logout
              </button>
            </>
          ) : (
            <>
              <Link href="/login">Login</Link>
              <Link href="/sign-up">Sign Up</Link>
            </>
          )}
          <ThemeToggle />
        </nav>
      </div>
    </header>
  );
}
```
## ./src/app/_components/Form.tsx
```
// components/Form.tsx
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

interface FormProps {
  fields: {
    name: string;
    label: string;
    type: string;
    options?: { value: string; label: string }[];
  }[];
  onSubmit: (data: any) => void;
  validationSchema: z.ZodObject<any>;
}

export default function CustomForm({
  fields,
  onSubmit,
  validationSchema,
}: FormProps) {
  const form = useForm<z.infer<typeof validationSchema>>({
    resolver: zodResolver(validationSchema),
  });

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        {fields.map((field) => (
          <FormField
            key={field.name}
            control={form.control}
            name={field.name}
            render={({ field: formField }) => (
              <FormItem>
                <FormLabel>{field.label}</FormLabel>
                <FormControl>
                  {field.type === "select" ? (
                    <Select
                      onValueChange={formField.onChange}
                      defaultValue={formField.value}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder={`Select ${field.label}`} />
                      </SelectTrigger>
                      <SelectContent>
                        {field.options?.map((option) => (
                          <SelectItem key={option.value} value={option.value}>
                            {option.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <Input type={field.type} {...formField} />
                  )}
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        ))}
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  );
}
```
## ./src/app/_components/create-post.tsx
```
"use client";

import { useRouter } from "next/navigation";
import { useState } from "react";

import { api } from "~/trpc/react";

export function CreatePost() {
  const router = useRouter();
  const [name, setName] = useState("");

  const createPost = api.post.create.useMutation({
    onSuccess: () => {
      router.refresh();
      setName("");
    },
  });

  return (
    <form
      onSubmit={(e) => {
        e.preventDefault();
        createPost.mutate({ name });
      }}
      className="flex flex-col gap-2"
    >
      <input
        type="text"
        placeholder="Title"
        value={name}
        onChange={(e) => setName(e.target.value)}
        className="w-full rounded-full px-4 py-2 text-black"
      />
      <button
        type="submit"
        className="rounded-full bg-white/10 px-10 py-3 font-semibold transition hover:bg-white/20"
        disabled={createPost.isLoading}
      >
        {createPost.isLoading ? "Submitting..." : "Submit"}
      </button>
    </form>
  );
}
```
## ./src/app/_components/Footer.tsx
```
// components/Footer.tsx
export default function Footer() {
  return (
    <footer className="border-t py-6 md:py-0">
      <div className="container flex flex-col items-center justify-between gap-4 md:h-24 md:flex-row">
        <p className="text-center text-sm leading-loose text-muted-foreground md:text-left">
          Built by MyAmble. The source code is available on GitHub.
        </p>
        <nav className="flex items-center space-x-4">
          <a
            href="/privacy"
            className="text-sm text-muted-foreground hover:underline"
          >
            Privacy Policy
          </a>
          <a
            href="/terms"
            className="text-sm text-muted-foreground hover:underline"
          >
            Terms of Service
          </a>
          <a
            href="/help"
            className="text-sm text-muted-foreground hover:underline"
          >
            Help
          </a>
        </nav>
      </div>
    </footer>
  );
}
```
## ./src/server/api/root.ts
```
// src/server/api/root.ts
import { createTRPCRouter } from "~/server/api/trpc";
import { surveyRouter } from "~/server/api/routers/survey";

export const appRouter = createTRPCRouter({
  survey: surveyRouter,
});

export type AppRouter = typeof appRouter;
```
## ./src/server/api/trpc.ts
```
/**
 * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:
 * 1. You want to modify request context (see Part 1).
 * 2. You want to create a new middleware or type of procedure (see Part 3).
 *
 * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will
 * need to use are documented accordingly near the end.
 */

import { initTRPC, TRPCError } from "@trpc/server";
import { type NextRequest } from "next/server";
import superjson from "superjson";
import { ZodError } from "zod";

import { getServerAuthSession } from "~/server/auth";
import { db } from "~/server/db";

/**
 * 1. CONTEXT
 *
 * This section defines the "contexts" that are available in the backend API.
 *
 * These allow you to access things when processing a request, like the database, the session, etc.
 */

interface CreateContextOptions {
  headers: Headers;
}

/**
 * This helper generates the "internals" for a tRPC context. If you need to use it, you can export
 * it from here.
 *
 * Examples of things you may need it for:
 * - testing, so we don't have to mock Next.js' req/res
 * - tRPC's `createSSGHelpers`, where we don't have req/res
 *
 * @see https://create.t3.gg/en/usage/trpc#-serverapitrpcts
 */
export const createInnerTRPCContext = async (opts: CreateContextOptions) => {
  const session = await getServerAuthSession();

  return {
    session,
    headers: opts.headers,
    db,
  };
};

/**
 * This is the actual context you will use in your router. It will be used to process every request
 * that goes through your tRPC endpoint.
 *
 * @see https://trpc.io/docs/context
 */
export const createTRPCContext = async (opts: { req: NextRequest }) => {
  // Fetch stuff that depends on the request

  return await createInnerTRPCContext({
    headers: opts.req.headers,
  });
};

/**
 * 2. INITIALIZATION
 *
 * This is where the tRPC API is initialized, connecting the context and transformer. We also parse
 * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation
 * errors on the backend.
 */

const t = initTRPC.context<typeof createTRPCContext>().create({
  transformer: superjson,
  errorFormatter({ shape, error }) {
    return {
      ...shape,
      data: {
        ...shape.data,
        zodError:
          error.cause instanceof ZodError ? error.cause.flatten() : null,
      },
    };
  },
});

/**
 * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)
 *
 * These are the pieces you use to build your tRPC API. You should import these a lot in the
 * "/src/server/api/routers" directory.
 */

/**
 * This is how you create new routers and sub-routers in your tRPC API.
 *
 * @see https://trpc.io/docs/router
 */
export const createTRPCRouter = t.router;

/**
 * Public (unauthenticated) procedure
 *
 * This is the base piece you use to build new queries and mutations on your tRPC API. It does not
 * guarantee that a user querying is authorized, but you can still access user session data if they
 * are logged in.
 */
export const publicProcedure = t.procedure;

/** Reusable middleware that enforces users are logged in before running the procedure. */
const enforceUserIsAuthed = t.middleware(({ ctx, next }) => {
  if (!ctx.session || !ctx.session.user) {
    throw new TRPCError({ code: "UNAUTHORIZED" });
  }
  return next({
    ctx: {
      // infers the `session` as non-nullable
      session: { ...ctx.session, user: ctx.session.user },
    },
  });
});

/**
 * Protected (authenticated) procedure
 *
 * If you want a query or mutation to ONLY be accessible to logged in users, use this. It verifies
 * the session is valid and guarantees `ctx.session.user` is not null.
 *
 * @see https://trpc.io/docs/procedures
 */
export const protectedProcedure = t.procedure.use(enforceUserIsAuthed);
```
## ./src/server/api/routers/survey.ts
```
// src/server/api/routers/survey.ts
import { z } from "zod";
import { createTRPCRouter, protectedProcedure } from "~/server/api/trpc";
import { survey } from "~/server/db/schema";

export const surveyRouter = createTRPCRouter({
  create: protectedProcedure
    .input(
      z.object({
        title: z.string().optional(),
        description: z.string().optional(),
        data: z.any(),
      }),
    )
    .mutation(async ({ ctx, input }) => {
      const newSurvey = await ctx.db
        .insert(survey)
        .values({
          name: input.title || "Untitled Survey",
          description: input.description || "",
          creatorId: ctx.session.user.id,
          data: input.data,
        })
        .returning();

      return newSurvey[0];
    }),
});
```
## ./src/server/api/routers/post.example.ts
```
import { z } from "zod";

import {
  createTRPCRouter,
  protectedProcedure,
  publicProcedure,
} from "~/server/api/trpc";

/**
 * This is just an example router for you to get started.
 * You can delete it if you're not using it.
 */
export const postExampleRouter = createTRPCRouter({
  // hello: publicProcedure
  //   .input(z.object({ text: z.string() }))
  //   .query(({ input }) => {
  //     return {
  //       greeting: `Hello ${input.text}`,
  //     };
  //   }),
  // create: protectedProcedure
  //   .input(z.object({ name: z.string().min(1) }))
  //   .mutation(async ({ ctx, input }) => {
  //     // simulate a slow db call
  //     await new Promise((resolve) => setTimeout(resolve, 1000));
  //     await ctx.db.insert(posts).values({
  //       name: input.name,
  //       createdById: ctx.session.user.id,
  //     });
  //   }),
  // getLatest: publicProcedure.query(({ ctx }) => {
  //   return ctx.db.query.posts.findFirst({
  //     orderBy: (posts, { desc }) => [desc(posts.createdAt)],
  //   });
  // }),
  // getSecretMessage: protectedProcedure.query(() => {
  //   return "you can now see this secret message!";
  // }),
});
```
## ./src/server/db/schema.ts
```
import {
  timestamp,
  text,
  primaryKey,
  integer,
  pgTableCreator,
  bigint,
  varchar,
  pgEnum,
  PgColumn,
  jsonb,
} from "drizzle-orm/pg-core";
import type { AdapterAccount } from "@auth/core/adapters";

/**
 * This is an example of how to use the multi-project schema feature of Drizzle ORM. Use the same
 * database instance for multiple projects.
 *
 * @see https://orm.drizzle.team/docs/goodies#multi-project-schema
 */

export const pgTable = pgTableCreator((name) => `myamble_${name}`);

// application level tables
export const roleEnum = pgEnum("role", ["USER", "OWNER"]);

export const users = pgTable("user", {
  id: text("id").notNull().primaryKey(),
  name: text("name"),
  email: text("email").notNull(),
  emailVerified: timestamp("emailVerified", { mode: "date" }),
  image: text("image"),
  role: roleEnum("role").default("USER"),
  adminUserId: text("adminUserId").references((): PgColumn => users.id, {
    onDelete: "no action",
  }),
});
export const UserSelect = users.$inferSelect;
export const UserInsert = users.$inferInsert;

export const survey = pgTable("survey", {
  id: text("id").notNull().primaryKey(),
  name: text("name").notNull(),
  description: text("description"),
  createdAt: timestamp("createdAt", { mode: "date" }).defaultNow(),
  updatedAt: timestamp("updatedAt", { mode: "date" }).defaultNow(),
  creatorId: text("creatorId").references((): PgColumn => users.id, {
    onDelete: "cascade",
  }),
  data: jsonb("data"),
});
export const SurveySelect = survey.$inferSelect;
export const SurveyInsert = survey.$inferInsert;

export const surveyAssignment = pgTable("survey_assignment", {
  id: text("id").notNull().primaryKey(),
  createdAt: timestamp("createdAt", { mode: "date" }).defaultNow(),
  updatedAt: timestamp("updatedAt", { mode: "date" }).defaultNow(),
  surveyId: text("surveyId").references((): PgColumn => survey.id, {
    onDelete: "cascade",
  }),
  occurrence: text("occurrence")
    .$type<"once" | "daily" | "weekly" | "monthly">()
    .notNull(),
  startDate: timestamp("startDate", { mode: "date" }).notNull(),
  endDate: timestamp("endDate", { mode: "date" }),
});
export const SurveyAssignmentSelect = surveyAssignment.$inferSelect;
export const SurveyAssignmentInsert = surveyAssignment.$inferInsert;

export const surveySubmission = pgTable("survey_submission", {
  id: text("id").notNull().primaryKey(),
  createdAt: timestamp("createdAt", { mode: "date" }).defaultNow(),
  updatedAt: timestamp("updatedAt", { mode: "date" }).defaultNow(),
  surveyAssignmentId: text("surveyAssignmentId").references(
    (): PgColumn => surveyAssignment.id,
    {
      onDelete: "cascade",
    },
  ),
  data: jsonb("data"),
});
export const SurveySubmissionSelect = surveySubmission.$inferSelect;
export const SurveySubmissionInsert = surveySubmission.$inferInsert;

export const conversation = pgTable("conversation", {
  id: text("id").notNull().primaryKey(),
  createdAt: timestamp("createdAt", { mode: "date" }).defaultNow(),
  updatedAt: timestamp("updatedAt", { mode: "date" }).defaultNow(),
});
export const ConversationSelect = conversation.$inferSelect;
export const ConversationInsert = conversation.$inferInsert;

export const conversationParticipant = pgTable(
  "conversation_participant",
  {
    userId: text("userId")
      .notNull()
      .references(() => users.id, {
        onDelete: "cascade",
      }),
    conversationId: text("conversationId")
      .notNull()
      .references(() => conversation.id, {
        onDelete: "cascade",
      }),
  },
  (userConversation: any) => ({
    primaryKey: primaryKey(
      userConversation.userId,
      userConversation.conversationId,
    ),
  }),
);
export const ConversationParticipantSelect =
  conversationParticipant.$inferSelect;
export const ConversationParticipantInsert =
  conversationParticipant.$inferInsert;

export const message = pgTable("message", {
  id: text("id").notNull().primaryKey(),
  createdAt: timestamp("createdAt", { mode: "date" }).defaultNow(),
  updatedAt: timestamp("updatedAt", { mode: "date" }).defaultNow(),
  content: text("content"),
  conversationId: text("conversationId").references(
    (): PgColumn => conversation.id,
    {
      onDelete: "cascade",
    },
  ),
});
export const MessageSelect = message.$inferSelect;
export const MessageInsert = message.$inferInsert;

// system stuff
export const accounts = pgTable(
  "account",
  {
    userId: text("userId")
      .notNull()
      .references(() => users.id, { onDelete: "cascade" }),
    type: text("type").$type<AdapterAccount["type"]>().notNull(),
    provider: text("provider").notNull(),
    providerAccountId: text("providerAccountId").notNull(),
    refresh_token: text("refresh_token"),
    access_token: text("access_token"),
    expires_at: integer("expires_at"),
    token_type: text("token_type"),
    refresh_token_expires_in: integer("refresh_token_expires_in"),
    scope: text("scope"),
    id_token: text("id_token"),
    session_state: text("session_state"),
  },
  (account: any) => ({
    compoundKey: primaryKey(account.provider, account.providerAccountId),
  }),
);
export const AccountSelect = accounts.$inferSelect;
export const AccountInsert = accounts.$inferInsert;

export const sessions = pgTable("session", {
  sessionToken: text("sessionToken").notNull().primaryKey(),
  userId: text("userId")
    .notNull()
    .references(() => users.id, { onDelete: "cascade" }),
  expires: timestamp("expires", { mode: "date" }).notNull(),
});
export const SessionSelect = sessions.$inferSelect;
export const SessionInsert = sessions.$inferInsert;

export const verificationTokens = pgTable(
  "verificationToken",
  {
    identifier: text("identifier").notNull(),
    token: text("token").notNull(),
    expires: timestamp("expires", { mode: "date" }).notNull(),
  },
  (vt: any) => ({
    compoundKey: primaryKey(vt.identifier, vt.token),
  }),
);
export const VerificationTokenSelect = verificationTokens.$inferSelect;
export const VerificationTokenInsert = verificationTokens.$inferInsert;
```
## ./src/server/db/surveyTypes.ts
```
// export type Survey = {
//   questions: Question[];
// };

// // Base type for all questions
// export type BaseQuestion = {
//   id: string;
//   type: QuestionTypeStr;
//   heading: string;
//   body: string;
//   required: boolean;
// };

// export type HasID = {
//   id: string;
// };

// // Specific question types
// export type SingleSelectQuestion = BaseQuestion & {
//   type: QuestionTypeStr.single_select;
//   singleSelectOptions: HasID &
//     {
//       icon: string;
//       label: string;
//     }[];
//   defaultSingleSelectOption: HasID;
// };

// export type MultiSelectQuestion = BaseQuestion & {
//   type: QuestionTypeStr.multi_select;
//   multiSelectOptions: HasID &
//     {
//       icon: string;
//       label: string;
//     }[];
//   defaultMultiSelectOptions: HasID[];
// };

// export type NumberQuestion = BaseQuestion & {
//   type: QuestionTypeStr.number;
//   numberMin: number;
//   numberMax: number;
//   numberStep: number;
//   defaultNumber: number;
// };

// export type TimeQuestion = BaseQuestion & {
//   type: QuestionTypeStr.time;
//   timeMin: string;
//   timeMax: string;
//   defaultTime: string;
// };

// export type DateQuestion = BaseQuestion & {
//   type: QuestionTypeStr.date;
//   includeTime: boolean;
//   dateMin: string | "past" | "future";
//   dateMax: string | "past" | "future";
//   defaultDate: string;
// };

// export type YesNoQuestion = BaseQuestion & {
//   type: QuestionTypeStr.yes_no;
//   defaultYesNo: "yes" | "no";
// };

// export type RatingQuestion = BaseQuestion & {
//   type: QuestionTypeStr.rating;
//   defaultRating: number;
// };

// export type LongTextQuestion = BaseQuestion & {
//   type: QuestionTypeStr.long_text;
//   defaultLongText: string;
// };

// export type ShortTextQuestion = BaseQuestion & {
//   type: QuestionTypeStr.short_text;
//   defaultShortText: string;
// };

// export type NumberRangeQuestion = BaseQuestion & {
//   type: QuestionTypeStr.number_range;
//   numberRangeMin: number;
//   numberRangeMax: number;
//   numberRangeStep: number;
//   numberRangeMinSep: number;
//   numberRangeMaxSep: number;
//   defaultNumberRange: number;
// };

// export type TimeRangeQuestion = BaseQuestion & {
//   type: QuestionTypeStr.time_range;
//   timeRangeMin: string;
//   timeRangeMax: string;
//   timeRangeMinSep: string;
//   timeRangeMaxSep: string;
//   defaultTimeRange: string;
// };

// export type DateRangeQuestion = BaseQuestion & {
//   type: QuestionTypeStr.date_range;
//   includeTime: boolean;
//   dateRangeMin: string | "past" | "future";
//   dateRangeMax: string | "past" | "future";
//   dateRangeMinSep: string | "past" | "future";
//   dateRangeMaxSep: string | "past" | "future";
//   defaultDateRange: string;
// };

// // Union type for any question
// export type AnyQuestion =
//   | SingleSelectQuestion
//   | MultiSelectQuestion
//   | NumberQuestion
//   | DateQuestion
//   | YesNoQuestion
//   | RatingQuestion
//   | LongTextQuestion
//   | ShortTextQuestion
//   | NumberRangeQuestion
//   | DateRangeQuestion;

// export enum QuestionTypeStr {
//   single_select,
//   multi_select,
//   number,
//   time,
//   date,
//   yes_no,
//   rating,
//   long_text,
//   short_text,
//   number_range,
//   time_range,
//   date_range,
// }

// export const QuestionTypes = [
//   {
//     id: QuestionTypeStr.single_select,
//     name: "Single Select",
//     icon: "single_select",
//   },
//   {
//     id: QuestionTypeStr.multi_select,
//     name: "Multi Select",
//     icon: "multi_select",
//   },
//   {
//     id: QuestionTypeStr.number,
//     name: "Number",
//     icon: "number",
//   },
//   {
//     id: QuestionTypeStr.date,
//     name: "Date",
//     icon: "date",
//   },
//   {
//     id: QuestionTypeStr.yes_no,
//     name: "Yes/No",
//     icon: "yes_no",
//   },
//   {
//     id: QuestionTypeStr.rating,
//     name: "Rating",
//     icon: "rating",
//   },
//   {
//     id: QuestionTypeStr.long_text,
//     name: "Long Text",
//     icon: "long_text",
//   },
//   {
//     id: QuestionTypeStr.short_text,
//     name: "Short Text",
//     icon: "short_text",
//   },
//   {
//     id: QuestionTypeStr.number_range,
//     name: "Number Range",
//     icon: "number_range",
//   },
//   {
//     id: QuestionTypeStr.date_range,
//     name: "Date Range",
//     icon: "date_range",
//   },
// ];
```
## ./src/server/db/index.ts
```
import { drizzle } from "drizzle-orm/node-postgres";
import { Client } from "pg";

import { env } from "~/env.mjs";
import * as schema from "./schema";

const client = new Client({
  connectionString: env.DATABASE_URL,
});

await client.connect();
export const db = drizzle(client, {
  schema: schema
});
```
## ./src/server/auth.ts
```
import { DrizzleAdapter } from "@auth/drizzle-adapter";
import { sql } from "drizzle-orm";
import {
  getServerSession,
  type DefaultSession,
  type NextAuthOptions,
  type Session,
} from "next-auth";
import { type DefaultJWT, type JWT } from "next-auth/jwt";
import GithubProvider from "next-auth/providers/github";

import { env } from "~/env.mjs";
import { db } from "~/server/db";
import { pgTable, users } from "~/server/db/schema";

/**
 * Module augmentation for `next-auth` types. Allows us to add custom properties to the `session`
 * object and keep type safety.
 *
 * @see https://next-auth.js.org/getting-started/typescript#module-augmentation
 */

enum UserRole {
  USER = "USER",
  ADMIN = "OWNER",
}
declare module "next-auth" {
  interface Session extends DefaultSession {
    user: {
      id: string;
      role: UserRole;
    } & DefaultSession["user"];
  }

  interface User {
    role: UserRole;
  }
}
declare module "next-auth/adapters" {
  export interface AdapterUser {
    role?: UserRole;
  }
}
declare module "next-auth/jwt" {
  /**
   * Returned by `useSession`, `getSession` and received as a prop on the `SessionProvider` React Context
   */

  interface JWT extends DefaultJWT {
    id: string;
    role: UserRole;
    emailVerified: Date | null;
  }
}
/**
 * Options for NextAuth.js used to configure adapters, providers, callbacks, etc.
 *
 * @see https://next-auth.js.org/configuration/options
 */
export const authOptions: NextAuthOptions = {
  callbacks: {
    session({ session, token }: { session: Session; token: JWT }) {
      if (token) {
        session.user.id = token.id;
        session.user.email = token.email;
        session.user.role = token.role;
        session.user.image = token.picture; // replace 'image' with 'picture'
      }
      return session;
    },
    jwt: async ({ token }: { token: JWT }) => {
      const userCheck = await db
        .select()
        .from(users)
        .where(sql`${users.email} = ${token.email}`);
      const dbUser = userCheck[0];

      if (!dbUser) {
        console.log("No User");
        throw new Error("Unable to find user");
      }

      return {
        id: dbUser.id,
        role: dbUser.role as UserRole,
        email: dbUser.email,
        emailVerified: dbUser.emailVerified,
        name: dbUser.name,
        picture: dbUser.image,
        sub: token.sub,
      };
    },
    async signIn({ user, account, profile }) {
      console.log(user)
      console.log(account)
      console.log(profile)

      const isAllowedToSignIn = true; // You can add your own login logic here
      if (isAllowedToSignIn) {
        return `/`; // Redirect to a specific page after sign in
      } else {
        // Return false to display a default error message
        return false;
      }
    },
  },
  session: {
    strategy: "jwt",
  },
  jwt: {
    secret: env.NEXTAUTH_SECRET,
  },
  secret: env.NEXTAUTH_SECRET,
  adapter: DrizzleAdapter(db, pgTable),
  providers: [
    GithubProvider({
      clientId: env.GITHUB_CLIENT_ID,
      clientSecret: env.GITHUB_CLIENT_SECRET,
    }),
  ],
  pages: {},
};

export const getServerAuthSession = () => getServerSession(authOptions);
```
## ./src/trpc/server.ts
```
import {
  createTRPCProxyClient,
  loggerLink,
  unstable_httpBatchStreamLink,
} from "@trpc/client";
import { cookies } from "next/headers";

import { type AppRouter } from "~/server/api/root";
import { getUrl, transformer } from "./shared";

export const api = createTRPCProxyClient<AppRouter>({
  transformer,
  links: [
    loggerLink({
      enabled: (op) =>
        process.env.NODE_ENV === "development" ||
        (op.direction === "down" && op.result instanceof Error),
    }),
    unstable_httpBatchStreamLink({
      url: getUrl(),
      headers() {
        return {
          cookie: cookies().toString(),
          "x-trpc-source": "rsc",
        };
      },
    }),
  ],
});
```
## ./src/trpc/react.tsx
```
"use client";

import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { loggerLink, unstable_httpBatchStreamLink } from "@trpc/client";
import { createTRPCReact } from "@trpc/react-query";
import { useState } from "react";

import { type AppRouter } from "~/server/api/root";
import { getUrl, transformer } from "./shared";

export const api = createTRPCReact<AppRouter>();

export function TRPCReactProvider(props: {
  children: React.ReactNode;
  cookies: string;
}) {
  const [queryClient] = useState(() => new QueryClient());

  const [trpcClient] = useState(() =>
    api.createClient({
      transformer,
      links: [
        loggerLink({
          enabled: (op) =>
            process.env.NODE_ENV === "development" ||
            (op.direction === "down" && op.result instanceof Error),
        }),
        unstable_httpBatchStreamLink({
          url: getUrl(),
          headers() {
            return {
              cookie: props.cookies,
              "x-trpc-source": "react",
            };
          },
        }),
      ],
    })
  );

  return (
    <QueryClientProvider client={queryClient}>
      <api.Provider client={trpcClient} queryClient={queryClient}>
        {props.children}
      </api.Provider>
    </QueryClientProvider>
  );
}
```
## ./src/trpc/shared.ts
```
import { type inferRouterInputs, type inferRouterOutputs } from "@trpc/server";
import superjson from "superjson";

import { type AppRouter } from "~/server/api/root";

export const transformer = superjson;

function getBaseUrl() {
  if (typeof window !== "undefined") return "";
  if (process.env.VERCEL_URL) return `https://${process.env.VERCEL_URL}`;
  return `http://localhost:${process.env.PORT ?? 3000}`;
}

export function getUrl() {
  return getBaseUrl() + "/api/trpc";
}

/**
 * Inference helper for inputs.
 *
 * @example type HelloInput = RouterInputs['example']['hello']
 */
export type RouterInputs = inferRouterInputs<AppRouter>;

/**
 * Inference helper for outputs.
 *
 * @example type HelloOutput = RouterOutputs['example']['hello']
 */
export type RouterOutputs = inferRouterOutputs<AppRouter>;
```
## ./README.md
```
# T3 PostgreSQL Template with Drizzle and NextAuth

A Quick Template for converting the experimental App router version for the T3 stack into connecting to a PostgreSQL server instead of planetscale / MySQL. Uses JWT tokens and has template code for adding extra session props like role. Works with Github OAuth out of the box

## Features

- Feature 1: Configuration of DrizzleORM to allow for PostgreSQL Integration with Next-Auth.
- Feature 2: Custom Template code for adding properties to sessions upon Authorization.
- Feature 3: Addition of Github as an OAuth provider - with the necessary DrizzleORM schema defined.

## Prerequisites

Before you begin, ensure you have met the following requirements:

- Node.js installed 
- A PostgreSQL database set up
- Git installed on your machine

## How to Get Started

Follow these steps to get your development environment running:

### 1. Clone the Repository

First, clone the project repository to your local machine:

```bash
git clone https://github.com/EthanAmato/T3-Postgres-Drizzle-Template
```

### 2. Navigate to the Project Directory

After cloning, change into the project directory:

```bash
cd [project directory]
```
Replace `[project directory]` with the name of the folder where the repository was cloned.

### 3. Install Dependencies

Install the necessary Node.js dependencies:

```bash
npm install
```

This command will install all dependencies listed in your `package.json` file.

### 4. Set Up the Database

Ensure your PostgreSQL database is running. Then, set up the database structure using the following command from Drizzle-Kit:

```bash
npm run db:push
```

This command will create the necessary tables and structures in your database as defined in your project.

### 5. Start the Development Server

Finally, start the development server:

```bash
npm run dev
```

This will start the server on a default port (usually 3000) and you can access the application in your browser at `http://localhost:3000`.

## Contributing

If you want to contribute to this project, please follow these steps:

1. Fork the repository.
2. Create a new branch: `git checkout -b branch-name`.
3. Make your changes and commit them: `git commit -m 'commit message'`.
4. Push to the original branch: `git push origin [project name]/[location]`.
5. Create the pull request.

Alternatively, see the GitHub documentation on [creating a pull request](https://help.github.com/articles/creating-a-pull-request/).

## License

MIT License

Copyright (c) [year] [fullname]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
```
## ./.eslintrc.cjs
```
/** @type {import("eslint").Linter.Config} */
const config = {
  parser: "@typescript-eslint/parser",
  parserOptions: {
    project: true,
  },
  plugins: ["@typescript-eslint"],
  extends: [
    "next/core-web-vitals",
    "plugin:@typescript-eslint/recommended-type-checked",
    "plugin:@typescript-eslint/stylistic-type-checked",
  ],
  rules: {
    // These opinionated rules are enabled in stylistic-type-checked above.
    // Feel free to reconfigure them to your own preference.
    "@typescript-eslint/array-type": "off",
    "@typescript-eslint/consistent-type-definitions": "off",

    "@typescript-eslint/consistent-type-imports": [
      "warn",
      {
        prefer: "type-imports",
        fixStyle: "inline-type-imports",
      },
    ],
    "@typescript-eslint/no-unused-vars": ["warn", { argsIgnorePattern: "^_" }],
    "@typescript-eslint/no-misused-promises": [
      2,
      {
        checksVoidReturn: { attributes: false },
      },
    ],
  },
};

module.exports = config;
```
## ./DOCKERFILE
```
# Receive build mode argument
ARG MODE=local

# Use the official Node.js 18 image.
FROM node:18-alpine

# Create and change to the app directory.
WORKDIR /usr/src/app

# Copy application dependency manifests to the container image.
COPY package*.json ./

# Install production dependencies.
RUN npm install --only=production

# Copy local code to the container image.
COPY . .

# Copy the appropriate .env file based on the build mode
COPY .env.${MODE} ./.env

# Build the application.
RUN npm run build

# Run the application on container startup.
CMD [ "npm", "start" ]
```
## ./public/favicon.ico
```
 h6   (û00 h&∆(  ÓË·LÔÁ‰AÒÍ„$ÔË‚éË·µË·ôÒÁ‚5Ë‚¿ÒÈ„§ÛÁ‰AË‚ÙË·ÁÔË‚±Ë‚‹Ë‚¸ÔË‚bË‚¿ÒÈ„§ˇˇˇË„‚Ë‚ªˇÊÊ
ˇˇˇÔË·õÁ‚˜ÎÎ‚Ë‚¿ÒÈ„§ÒÈ‰}ÙÍ‰0ÔﬂﬂË‚¸ÚÍ‚bË‚¿ÒÈ„§øøøÁ·¯ÒÁ„lË‚¿ÒÈ„§ÔÁ·_Ë‚ˇÂ‡2Ë‚¿ÒÈ„§ÚÍ‰_ÒË‚XÒÈ„\ÒË‚˘ÒÁ‚üË‚¿ÒÈ„§ˇË‚ûÒÈ‚˙ÔÊ„RÌÌÌÒË„mˇˇˇË‚¿ÒÈ„§ˇˇ™ÔË„£Ë‚˘ÚË·LÙÈﬁÚÊÊøøøÒË‚ßÒË‚˜ÒÊ‚GÔË‚NÒË‚∞ÒË‚∞ÒË‚∞ÒË‚∞ÒË‚∞ÒË‚∞ÒË‚∞ÒË‚∞ÒË‚∞ÚÈ„QˇˇˇÈ„´ÔÁ‚ˆÛÁ‰AÔË‚OÒË„≥ÒË„≥ÒË„≥ÒË„≥ÒË„≥ÒË„≥ÒË„≥ÒË„≥ÒË„≥Ë‚ÆˆÌÂˇˇˇÒË‚|ÔÁ·Äﬂﬂﬂ( @ ﬂﬂﬂË‡BÈ‚hÔË·nÔÈ„RÛËËË„fË‚…Ë‚…ÓÂ·;ËË—ÒÍ‰ÉË·ÔË‚ˇË‚ˇË‚ˇË‚ˇË‚¸Á‚≠ÒÍ„%ÒÈ„ÅË‚ˇË‚ˇÒÍ„JÓÊÊÒË‚‘Ë‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇÔË‚ÙÚË‚OÒÈ„ÅË‚ˇË‚ˇÒÍ„JÓ››ÒÈ„ÿË‚ˇË‚ˇÁ·˘ÔË·§Ë„fÔÁ·_ÓÁ‚ãÒÈ‚ÊË‚ˇË‚ˇÒË‚˘ÛÍ‚>ÒÈ„ÅË‚ˇË‚ˇÒÍ„JÒÈ‚îË‚ˇË‚ˇË‚⁄ÏÊ‡)ÍÍÍË‚ßË‚ˇË‚ˇË‚ﬁˇˇ€ÒÈ„ÅË‚ˇË‚ˇÒÍ„JÔÔÔÒË‚¯Ë‚ˇÔË‚ÛË·"ˇˇˇÔÁ‚¬Ë‚ˇË‚ˇÚÍ‰_ÒÈ„ÅË‚ˇË‚ˇÒÍ„JË‰{Ë‚ˇÈ‚åÓÊ‚=Ë‚ˇË‚ˇË‚ØÒÈ„ÅË‚ˇË‚ˇÒÍ„JË‰{ÒÁ‚5ˇˇˇÔÁ‚ÙË‚ˇÒÈ„⁄ÒÈ„ÅË‚ˇË‚ˇÒÍ„JÒË‚ÂË‚ˇÔË‚‰ÒÈ„ÅË‚ˇË‚ˇÒÍ„JÌÌ€Ë‚¸Ë‚ˇÁ‚ÕÒÈ„ÅË‚ˇË‚ˇÒÍ„JÓÁ‚iË‚ˇË‚ˇÔÁ‚ìÒÈ„ÅË‚ˇË‚ˇÒÍ„JÒÍ„%ÒË„ÏË‚ˇË‚˛Ê·3ÒÈ„ÅË‚ˇË‚ˇÒÍ„JıÎÊ4ÚÈ‰9ˇˇˇÁ·UÒË‚ËË‚ˇË‚ˇÔË·£ÒÈ„ÅË‚ˇË‚ˇÒÍ„JÈ„SÔË‚ıË‚ÒÏ‚5ÌÁ·*Ë‚Ë‚ˇË‚ˇÁ‚ÕÌ€€ÒÈ„ÅË‚ˇË‚ˇÒÍ„JˇÄÄÒÈ„∂Ë‚ˇË‚ˇÒË‚ÌÔÂ‡1ÒË‰8Ë‚ÒÁ‚≠ÓÓÓÒÈ„ÅË‚ˇË‚ˇÒÍ„Jˇ„„	Ë·ºË‚ˇË‚ˇÁ‚ÎÓË‚,ÛÛËÒÈ„ÅË‚ˇË‚ˇÒÍ„JˇˇÊ
Ë„øË‚ˇË‚ˇË‚ËÚÊﬂ(ÒÈ„ÅË‚ˇË‚ˇÒÍ„JÍÍÍÔÁ‚√Ë‚ˇË‚ˇÈ‚‰ÒÍ„$ÔÊﬁÚÍÊ<ÚÍÊ<Ò„„Ì€€ÒË„∆Ë‚ˇË‚ˇË„·Ë‡!ÓÓ›ÒË„…Ë‚ˇË‚ˇË‚›ˆÌ‰Á·VÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÛÁ·+··Ë‚ÃË‚ˇË‚ˇË‚⁄Î‚‚Ë„‡Ë‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ÏÙË„-Ú‰‰Ë‚–Ë‚ˇË‚ˇÒË‚’ÛËËË„‡Ë‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇÒË‚ËÚÏÊ(ÁÁ€ÔË‚”Ë‚ˇË‚ˇÔË‚“ÊÊŸÒÈ„[È‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÚË·MˇˇﬂÙÈﬁÙÈﬁÙÈﬁÊÊÊ
(0` ˇˇˇˇËËıÎ‡Ë·"ÒÍ„%ÒÍ„$ÓÊÊ‰‰◊øøøˇÎÎÒÁ„JÒÁ„JÒÁ„JÓÂ·;ˇˇ€ÔÁÁ È‰gÔÁ·°Ë‚ È„„È‚ÓË‚ÎÒÈ„ÿÒÈ„∂Ë‚ÖË‰B„„„	ÌÁ·+Ë‚ÌË‚ÌË‚ÌË‚ªÙÈﬁ‘‘‘ÔË‚bÒË‚÷Ë‚ˆË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚˝Á‚ÍÒÈ„§Î‚‚Ó„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡··ÔË·èË‚˚Ë‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇÔÁ‚·ÚÈ·;ˇˇˇÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡Ï„„Ë‚•Ë‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË„ÎË‚‹Ë‚·ÒË‚¯Ë‚ˇË‚ˇË‚ˇË‚ˇË‚ˇÁ‚„ÔÂ‚OˇˇˇÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ˇﬂﬂÈ·âÈ‚˙Ë‚ˇË‚ˇË‚ˇÒÈ„˚ÔË·ºÔÂ‚OÒÍ„$ÔÊÊË‡!ÎÂ2Ë‚ÜË‚ÔË‚ˇË‚ˇË‚ˇË‚˛Á·◊È‚#Ó„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ÚÌÂ:ÔË·Ë‚ˇË‚ˇË‚ˇÁ‚ÎÓÁ‚jˇˇˇË‡!ÔË·ΩË·˙Ë‚ˇË‚ˇË‚ˇË‚®ˇˇˇÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ˇˇˇÒÈ‚πË‚ˇË‚ˇË‚ˇÁ·‡ÔË‚NÈÈﬁË‚®Ë‚¸Ë‚ˇË‚ˇË‚¸ÒÊﬂGÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ÛÏÊ)ÒÈ„˚Ë‚ˇË‚ˇÒË‚¯Ë„xˇˇˇÛÊÊ)Ë„‡Ë‚ˇË‚ˇË‚ˇÈ‚∑ˇˇˇÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡Ë‰yÔË‚ÙË‚ˇË‚€ÔÁﬂ ÒÈ„ÄË‚ˇË‚ˇË‚ˇÁ‚·Î‰›&Ó„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ÊÊÊ
Í‰{ÔË‚ÙÚÍ„õˇˇˇË‡!Ë„¸Ë‚ˇË‚ˇÁ‚ÌÓÁ‡JÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ÊÊÊ
Ë‰yÛÁ‰AˇˇˇÁ‚„Ë‚ˇË‚ˇË‚ÙÚÍ‰_Ó„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ˇˇˇË‚—Ë‚ˇË‚ˇË‚ˆË„eÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ˇˇˇÒÈ‚ÊË‚ˇË‚ˇË„ÛÒÈ‰]Ó„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ÒÍ„%Ë‚˝Ë‚ˇË‚ˇË‚ÏÒÈ‚GÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ˇˇˇÚË„áË‚ˇË‚ˇË‚ˇË‚ﬁË‡!Ó„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ÒÁ‚5ÔÁ‚‚Ë‚ˇË‚ˇË‚ˇË‰®ˇ™™Ó„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ÛÁÁÁ‚∂Ë‚˝Ë‚ˇË‚ˇÒÈ„˝ÏÁ‚5Ó„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ˇˇˇˆÓÊ¯Î‰&ˇˇˇ„„„	ÛË‚,ÔÁ‚¡Ë‚ˇË‚ˇË‚ˇË‚˝Ë·òÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ˇˇˇË‰CÁ‚ÃË·œÌËﬂ8ˇˇˇÎÎÎÔÁ·ÄË·ÁË‚ˇË‚ˇË‚ˇË‚˛ÔÁ‚√ÔÊﬁÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ÚË·LË‚·Ë‚˛Ë‚˝Ë‚ÀË·"ˇˇ‘ÓË·yÁ‚˜Ë‚ˇË‚ˇË‚ˇÔÁ·‡ÌËﬂ8ÄÄÄÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ˇøøÒÈ‚ƒÒÈ„¸Ë‚ˇË‚ˇË‚ˇË·œÔÔﬁˇˇˇˇÔÁ‡çÒË‚˜Á·˘ÒÈ‰ÕÌÁ·*Ó„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ÒÍ„$Ë‚∫Ë‚˝Ë‚ˇË‚ˇË‚ˇÔË·ƒÓÈ„.‘‘‘ÚÈ„uÒÈ„ıÎÎÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ˇˇˇÚÎ‰&ÔË·œË‚ˇË‚ˇË‚ˇË‚˝Ë‚øÎÎ‚ˇˇˇˇˇˇÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ˆÌÌÔË‚—Ë‚˝Ë‚ˇË‚ˇË‚ˇÍ„øÙÈÈÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ÌÁ·*ÔÈ‚¡È„˝Ë‚ˇË‚ˇË‚ˇÒÈ‚∑Ú‰›&Ó„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ˇˇˇÓË„-ÒÁ‚÷Ë‚ˇË‚ˇË‚ˇË‚¸ÒË‚≤ÚÊÊÒÒ„Î„dÎ„dÎ„dÔË‚OÊÊÊ
ÒÍ„%Á‚ŸË‚˛Ë‚ˇË‚ˇË‚ˇÈ„≠ÒÒ„ÔÍ‡1Ë‚»Ë‚˛Ë‚ˇË‚ˇË‚ˇÈ„™ˆÓÊˇˇˇÊ‚4Á‚›Ë‚ˇË‚ˇË‚ˇÈ„˚ÒÈ„£ÔﬂﬂˇÍÍ˜ÔÊË‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!ÙÈﬁˇˇˇÓÈ„.ÔË·ﬂË‚˛Ë‚ˇË‚ˇË‚ˇË·öˇÌÌÍ‰UÒË„◊Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë·æÔÍ‰0ÒË‰8È„ŒË‚˛Ë‚ˇË‚ˇË‚ˇË‚úÍÍﬂÔÁ‚aÔË‚ıË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚˝Á‚¡ˆ„ŸˇˇˇÓÍ·<ÔÁ‚„Ë‚ˇË‚ˇË‚ˇË·˙ÒÈ‚ïˇÍÍÔÁ‚aÔË‚ıË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË„¿ÙÍﬂÌÈ‰9È‚‰Ë‚ˇË‚ˇË‚ˇË‚˝Ë„áËËËÒË‚XË‚ﬁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁÔÁ·†Î‚‚ÓÍ·<ÒË·íÁ‚ñÁ‚ñÁ‚ñÔÈ‚îÍÂ‡1ÎÎÎË!È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#ÔÁﬂ „„„	ˇˇˇ€€€ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂˇˇˇ
```
## ./package.json
```
{
  "name": "copy-hub-t3",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "build": "next build",
    "db:push": "dotenv drizzle-kit push:pg",
    "db:studio": "dotenv drizzle-kit studio",
    "dev": "next dev",
    "lint": "next lint",
    "start": "next start"
  },
  "dependencies": {
    "@auth/drizzle-adapter": "^0.3.7",
    "@azure/storage-blob": "^12.17.0",
    "@planetscale/database": "^1.11.0",
    "@radix-ui/react-icons": "^1.3.0",
    "@radix-ui/react-menubar": "^1.0.4",
    "@t3-oss/env-nextjs": "^0.7.0",
    "@tanstack/react-query": "^4.32.6",
    "@trpc/client": "^10.37.1",
    "@trpc/next": "^10.37.1",
    "@trpc/react-query": "^10.37.1",
    "@trpc/server": "^10.37.1",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.0.0",
    "drizzle-orm": "^0.28.5",
    "next": "^14.0.0",
    "next-auth": "^4.24.4",
    "next-themes": "^0.2.1",
    "pg": "^8.11.3",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "superjson": "^1.13.1",
    "survey-core": "^1.11.5",
    "survey-creator-react": "^1.11.5",
    "survey-react-ui": "^1.11.5",
    "tailwind-merge": "^2.0.0",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "@types/eslint": "^8.44.2",
    "@types/node": "^18.16.0",
    "@types/pg": "^8.10.9",
    "@types/react": "^18.2.33",
    "@types/react-dom": "^18.2.14",
    "@typescript-eslint/eslint-plugin": "^6.3.0",
    "@typescript-eslint/parser": "^6.3.0",
    "autoprefixer": "^10.4.14",
    "dotenv-cli": "^7.3.0",
    "drizzle-kit": "^0.19.13",
    "eslint": "^8.47.0",
    "eslint-config-next": "^14.0.0",
    "mysql2": "^3.6.1",
    "postcss": "^8.4.27",
    "prettier": "^3.0.0",
    "prettier-plugin-tailwindcss": "^0.5.1",
    "tailwindcss": "^3.3.3",
    "typescript": "^5.1.6"
  },
  "ct3aMetadata": {
    "initVersion": "7.23.2"
  },
  "packageManager": "npm@10.0.0"
}
```
## ./prettier.config.mjs
```
/** @type {import('prettier').Config & import('prettier-plugin-tailwindcss').options} */
const config = {
  plugins: ["prettier-plugin-tailwindcss"],
};

export default config;
```
## ./save
```
## ./components.json
```
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "./src/styles/globals.css",
    "baseColor": "slate",
    "cssVariables": true
  },
  "aliases": {
    "components": "~/app/_components",
    "utils": "~/app/lib/utils"
  }
}
```
## ./src/env.mjs
```
import { createEnv } from "@t3-oss/env-nextjs";
import { z } from "zod";

export const env = createEnv({
  /**
   * Specify your server-side environment variables schema here. This way you can ensure the app
   * isn't built with invalid env vars.
   */
  server: {
    DATABASE_URL: z
      .string()
      .url()
      .refine(
        (str) => !str.includes("YOUR_MYSQL_URL_HERE"),
        "You forgot to change the default URL",
      ),
    NODE_ENV: z
      .enum(["development", "test", "production"])
      .default("development"),
    NEXTAUTH_SECRET:
      process.env.NODE_ENV === "production"
        ? z.string()
        : z.string().optional(),
    NEXTAUTH_JWT_SECRET:
      process.env.NODE_ENV === "production"
        ? z.string()
        : z.string().optional(),
    NEXTAUTH_URL: z.preprocess(
      // This makes Vercel deployments not fail if you don't set NEXTAUTH_URL
      // Since NextAuth.js automatically uses the VERCEL_URL if present.
      (str) => process.env.VERCEL_URL ?? str,
      // VERCEL_URL doesn't include `https` so it cant be validated as a URL
      process.env.VERCEL ? z.string() : z.string().url(),
    ),

    // Add ` on ID and SECRET if you want to make sure they're not empty
    GITHUB_CLIENT_ID: z.string(),
    GITHUB_CLIENT_SECRET: z.string(),
  },

  /**
   * Specify your client-side environment variables schema here. This way you can ensure the app
   * isn't built with invalid env vars. To expose them to the client, prefix them with
   * `NEXT_PUBLIC_`.
   */
  client: {
    // NEXT_PUBLIC_CLIENTVAR: z.string(),
  },

  /**
   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.
   * middlewares) or client-side so we need to destruct manually.
   */
  runtimeEnv: {
    DATABASE_URL: process.env.DATABASE_URL,
    NODE_ENV: process.env.NODE_ENV,
    NEXTAUTH_SECRET: process.env.NEXTAUTH_SECRET,
    NEXTAUTH_JWT_SECRET: process.env.NEXTAUTH_JWT_SECRET,
    NEXTAUTH_URL: process.env.NEXTAUTH_URL,
    GITHUB_CLIENT_ID: process.env.GITHUB_CLIENT_ID,
    GITHUB_CLIENT_SECRET: process.env.GITHUB_CLIENT_SECRET,
  },
  /**
   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially
   * useful for Docker builds.
   */
  skipValidation: !!process.env.SKIP_ENV_VALIDATION,
  /**
   * Makes it so that empty strings are treated as undefined.
   * `SOME_VAR: z.string()` and `SOME_VAR=''` will throw an error.
   */
  emptyStringAsUndefined: true,
});
```
## ./src/styles/globals.css
```
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
```
## ./src/app/hooks/useAuth.tsx
```
// hooks/useAuth.tsx
import { useState, useEffect } from "react";
import { useRouter } from "next/router";

export function useAuth() {
  const [user, setUser] = useState(null);
  const router = useRouter();

  useEffect(() => {
    // Check authentication status
    const checkAuth = async () => {
      try {
        const response = await fetch("/api/auth/me");
        if (response.ok) {
          const userData = await response.json();
          setUser(userData);
        } else {
          setUser(null);
        }
      } catch (error) {
        console.error("Error checking authentication:", error);
        setUser(null);
      }
    };

    checkAuth();
  }, []);

  const login = async (credentials) => {
    try {
      const response = await fetch("/api/auth/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(credentials),
      });

      if (response.ok) {
        const userData = await response.json();
        setUser(userData);
        router.push("/dashboard");
      } else {
        throw new Error("Login failed");
      }
    } catch (error) {
      console.error("Login error:", error);
      throw error;
    }
  };

  const logout = async () => {
    try {
      await fetch("/api/auth/logout", { method: "POST" });
      setUser(null);
      router.push("/");
    } catch (error) {
      console.error("Logout error:", error);
    }
  };

  const signUp = async (userData) => {
    try {
      const response = await fetch("/api/auth/signup", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(userData),
      });

      if (response.ok) {
        const newUser = await response.json();
        setUser(newUser);
        router.push("/dashboard");
      } else {
        throw new Error("Signup failed");
      }
    } catch (error) {
      console.error("Signup error:", error);
      throw error;
    }
  };

  const updateUser = async (userData) => {
    try {
      const response = await fetch("/api/user/update", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(userData),
      });

      if (response.ok) {
        const updatedUser = await response.json();
        setUser(updatedUser);
      } else {
        throw new Error("User update failed");
      }
    } catch (error) {
      console.error("User update error:", error);
      throw error;
    }
  };

  return { user, login, logout, signUp, updateUser };
}
```
## ./src/app/lib/utils.ts
```
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
 
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
```
## ./src/app/page.tsx
```
// src/app/page.tsx
import Link from "next/link";
import { Button } from "~/components/ui/button";

export default function Home() {
  return (
    <div className="flex min-h-screen flex-col items-center justify-center py-2">
      <h1 className="mb-8 text-4xl font-bold">Welcome to MyAmble</h1>
      <p className="mb-8 max-w-2xl text-center text-xl">
        Empowering social work research through innovative surveys and data
        analysis. Join our platform to create, distribute, and analyze surveys
        with ease.
      </p>
      <div className="flex space-x-4">
        <Link href="/login">
          <Button>Login</Button>
        </Link>
        <Link href="/sign-up">
          <Button variant="outline">Sign Up</Button>
        </Link>
      </div>
    </div>
  );
}
```
## ./src/app/api/auth/[...nextauth]/route.ts
```
import NextAuth from "next-auth";

import { authOptions } from "~/server/auth";

// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };
```
## ./src/app/api/trpc/[trpc]/route.ts
```
import { fetchRequestHandler } from "@trpc/server/adapters/fetch";
import { type NextRequest } from "next/server";

import { env } from "~/env.mjs";
import { appRouter } from "~/server/api/root";
import { createTRPCContext } from "~/server/api/trpc";

const handler = (req: NextRequest) =>
  fetchRequestHandler({
    endpoint: "/api/trpc",
    req,
    router: appRouter,
    createContext: () => createTRPCContext({ req }),
    onError:
      env.NODE_ENV === "development"
        ? ({ path, error }) => {
            console.error(
              `‚ùå tRPC failed on ${path ?? "<no-path>"}: ${error.message}`
            );
          }
        : undefined,
  });

export { handler as GET, handler as POST };
```
## ./src/app/layout.tsx
```
import "~/styles/globals.css";

import { Inter } from "next/font/google";
import { cookies } from "next/headers";

import { TRPCReactProvider } from "~/trpc/react";
import { Providers } from "./Theme/Providers";
import SideMenu from "./_components/ui/SideMenu/sidemenu";

const inter = Inter({
  subsets: ["latin"],
  variable: "--font-sans",
});

export const metadata = {
  title: "Create T3 App",
  description: "Generated by create-t3-app",
  icons: [{ rel: "icon", url: "/favicon.ico" }],
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={`font-sans ${inter.variable}`}>
        <TRPCReactProvider cookies={cookies().toString()}>
          <Providers>
            {children}
            <SideMenu />
          </Providers>
        </TRPCReactProvider>
      </body>
    </html>
  );
}
```
## ./src/app/(pages)/survey/page.tsx
```

```
## ./src/app/(pages)/survey/Survey.module.css
```

```
## ./src/app/(pages)/(misc)/help/page.tsx
```
// src/app/(pages)/(misc)/help/page.tsx
export default function Help() {
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="mb-6 text-3xl font-bold">Help Center</h1>
      <div className="space-y-6">
        <section>
          <h2 className="mb-3 text-2xl font-semibold">
            Frequently Asked Questions
          </h2>
          <div className="space-y-4">
            <div>
              <h3 className="mb-2 text-lg font-medium">
                How do I create a survey?
              </h3>
              <p>
                To create a survey, log in to your account, navigate to the
                Survey Builder page, and follow the step-by-step guide to design
                your survey.
              </p>
            </div>
            <div>
              <h3 className="mb-2 text-lg font-medium">
                Can I collaborate with other researchers?
              </h3>
              <p>
                Yes, MyAmble supports collaboration. You can invite other
                researchers to view or edit your surveys from the Survey Builder
                page.
              </p>
            </div>
            <div>
              <h3 className="mb-2 text-lg font-medium">
                How secure is my data?
              </h3>
              <p>
                We take data security seriously. All data is encrypted in
                transit and at rest, and we follow industry best practices for
                data protection.
              </p>
            </div>
          </div>
        </section>
        <section>
          <h2 className="mb-3 text-2xl font-semibold">Getting Started Guide</h2>
          <ol className="list-inside list-decimal space-y-2">
            <li>Sign up for an account</li>
            <li>Verify your email address</li>
            <li>Log in to your dashboard</li>
            <li>Create your first survey using the Survey Builder</li>
            <li>Distribute your survey to participants</li>
            <li>Analyze results using our built-in tools and AI insights</li>
          </ol>
        </section>
        <section>
          <h2 className="mb-3 text-2xl font-semibold">Contact Support</h2>
          <p>
            If you need further assistance, please don't hesitate to contact our
            support team at{" "}
            <a
              href="mailto:support@myamble.com"
              className="text-blue-600 hover:underline"
            >
              support@myamble.com
            </a>
            .
          </p>
        </section>
      </div>
    </div>
  );
}
```
## ./src/app/(pages)/(misc)/help/Help.module.css
```

```
## ./src/app/(pages)/(misc)/privacy/page.tsx
```
// src/app/(pages)/(misc)/privacy/page.tsx
export default function Privacy() {
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="mb-6 text-3xl font-bold">Privacy Policy</h1>
      <p className="mb-4">Last updated: [Current Date]</p>
      <div className="space-y-6">
        <section>
          <h2 className="mb-3 text-2xl font-semibold">
            1. Information We Collect
          </h2>
          <p>
            We collect information you provide directly to us, such as when you
            create an account, respond to a survey, or contact us for support.
            This may include your name, email address, and any other information
            you choose to provide.
          </p>
        </section>
        <section>
          <h2 className="mb-3 text-2xl font-semibold">
            2. How We Use Your Information
          </h2>
          <p>
            We use the information we collect to provide, maintain, and improve
            our services, to communicate with you, and to comply with legal
            obligations.
          </p>
        </section>
        <section>
          <h2 className="mb-3 text-2xl font-semibold">3. Data Security</h2>
          <p>
            We implement appropriate technical and organizational measures to
            protect the security of your personal information.
          </p>
        </section>
        <section>
          <h2 className="mb-3 text-2xl font-semibold">4. Your Rights</h2>
          <p>
            You have the right to access, correct, or delete your personal
            information. You may also have the right to restrict or object to
            certain processing of your data.
          </p>
        </section>
        <section>
          <h2 className="mb-3 text-2xl font-semibold">
            5. Changes to This Policy
          </h2>
          <p>
            We may update this privacy policy from time to time. We will notify
            you of any changes by posting the new policy on this page.
          </p>
        </section>
        <section>
          <h2 className="mb-3 text-2xl font-semibold">6. Contact Us</h2>
          <p>
            If you have any questions about this privacy policy, please contact
            us at{" "}
            <a
              href="mailto:privacy@myamble.com"
              className="text-blue-600 hover:underline"
            >
              privacy@myamble.com
            </a>
            .
          </p>
        </section>
      </div>
    </div>
  );
}
```
## ./src/app/(pages)/(misc)/privacy/Privacy.module.css
```

```
## ./src/app/(pages)/(misc)/about/page.tsx
```
// src/app/(pages)/(misc)/about/page.tsx
export default function About() {
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="mb-6 text-3xl font-bold">About MyAmble</h1>
      <p className="mb-4">
        MyAmble is a cutting-edge platform designed to revolutionize social work
        research and practice. Our mission is to empower social workers and
        researchers with powerful tools for creating, distributing, and
        analyzing surveys.
      </p>
      <p className="mb-4">
        Founded in 2023, MyAmble combines the latest in survey technology with
        advanced data analysis capabilities, including AI-powered insights.
        We're committed to improving the efficiency and effectiveness of social
        work research, ultimately contributing to better outcomes for
        communities and individuals.
      </p>
      <h2 className="mb-4 mt-6 text-2xl font-semibold">Our Team</h2>
      <p className="mb-4">
        MyAmble is brought to you by a dedicated team of social work
        professionals, software engineers, and data scientists. Together, we're
        working to bridge the gap between technology and social work practice.
      </p>
      <h2 className="mb-4 mt-6 text-2xl font-semibold">Contact Us</h2>
      <p>
        For any inquiries or support, please reach out to us at{" "}
        <a
          href="mailto:support@myamble.com"
          className="text-blue-600 hover:underline"
        >
          support@myamble.com
        </a>
        .
      </p>
    </div>
  );
}
```
## ./src/app/(pages)/(misc)/about/About.module.css
```

```
## ./src/app/(pages)/(admin)/user-management/User-management.module.css
```

```
## ./src/app/(pages)/(admin)/user-management/page.tsx
```
// src/app/(pages)/(admin)/user-management/page.tsx
"use client";

import { useState, useEffect } from "react";
import { DataTable } from "~/components/ui/data-table";
import { Button } from "~/components/ui/button";
import { Input } from "~/components/ui/input";

export default function UserManagement() {
  const [users, setUsers] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");

  useEffect(() => {
    fetchUsers();
  }, []);

  const fetchUsers = async () => {
    try {
      const response = await fetch("/api/users");
      if (response.ok) {
        const data = await response.json();
        setUsers(data);
      }
    } catch (error) {
      console.error("Error fetching users:", error);
    }
  };

  const columns = [
    { accessorKey: "name", header: "Name" },
    { accessorKey: "email", header: "Email" },
    { accessorKey: "role", header: "Role" },
    {
      id: "actions",
      cell: ({ row }) => (
        <Button onClick={() => handleEditUser(row.original)}>Edit</Button>
      ),
    },
  ];

  const handleEditUser = (user) => {
    // Implement edit user functionality
    console.log("Edit user:", user);
  };

  const filteredUsers = users.filter(
    (user) =>
      user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      user.email.toLowerCase().includes(searchTerm.toLowerCase()),
  );

  return (
    <div className="container mx-auto px-4">
      <h1 className="mb-4 text-2xl font-bold">User Management</h1>
      <Input
        type="text"
        placeholder="Search users..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        className="mb-4"
      />
      <DataTable columns={columns} data={filteredUsers} />
    </div>
  );
}
```
## ./src/app/(pages)/(admin)/myamble-ai/page.tsx
```
// src/app/(pages)/(admin)/myamble-ai/page.tsx
"use client";

import { useState } from "react";
import { Button } from "~/components/ui/button";
import { Textarea } from "~/components/ui/textarea";

export default function MyAmbleAI() {
  const [query, setQuery] = useState("");
  const [results, setResults] = useState(null);
  const [loading, setLoading] = useState(false);

  const handleAnalysis = async () => {
    if (!query.trim()) return;

    setLoading(true);
    try {
      const response = await fetch("/api/myamble-ai", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ query }),
      });

      if (response.ok) {
        const data = await response.json();
        setResults(data);
      } else {
        throw new Error("Failed to perform analysis");
      }
    } catch (error) {
      console.error("Error performing analysis:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container mx-auto px-4">
      <h1 className="mb-4 text-2xl font-bold">MyAmble AI</h1>
      <Textarea
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        placeholder="Enter your analysis query..."
        className="mb-4"
        rows={4}
      />
      <Button onClick={handleAnalysis} disabled={loading}>
        {loading ? "Analyzing..." : "Analyze"}
      </Button>
      {results && (
        <div className="mt-8">
          <h2 className="mb-2 text-xl font-bold">Analysis Results:</h2>
          <pre className="overflow-x-auto rounded bg-gray-100 p-4">
            {JSON.stringify(results, null, 2)}
          </pre>
        </div>
      )}
    </div>
  );
}
```
## ./src/app/(pages)/(admin)/myamble-ai/Myamble-ai.module.css
```

```
## ./src/app/(pages)/(admin)/survey-builder/page.tsx
```
// src/app/(pages)/(admin)/survey-builder/page.tsx
"use client";

import { useState } from "react";
import { SurveyCreatorComponent, SurveyCreator } from "survey-creator-react";
import "survey-core/defaultV2.min.css";
import "survey-creator-core/survey-creator-core.min.css";
import { api } from "~/trpc/react";

export default function SurveyBuilder() {
  const [creator] = useState(() => new SurveyCreator());
  const createSurveyMutation = api.survey.create.useMutation();

  const saveSurvey = async (
    saveNo: number,
    callback: (no: number, isSuccess: boolean) => void,
  ) => {
    const surveyJson = creator.JSON;
    try {
      await createSurveyMutation.mutateAsync({
        title: surveyJson.title,
        description: surveyJson.description,
        data: surveyJson,
      });
      callback(saveNo, true);
    } catch (error) {
      console.error("Error saving survey:", error);
      callback(saveNo, false);
    }
  };

  creator.saveSurveyFunc = saveSurvey;

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="mb-4 text-2xl font-bold">Survey Builder</h1>
      <SurveyCreatorComponent creator={creator} />
    </div>
  );
}
```
## ./src/app/(pages)/(admin)/dashboard/Dashboard.module.css
```

```
## ./src/app/(pages)/(admin)/dashboard/page.tsx
```
// src/app/(pages)/(admin)/dashboard/page.tsx
"use client";

import { useAuth } from "@/hooks/useAuth";
import { useEffect, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function Dashboard() {
  const { user } = useAuth();
  const [dashboardData, setDashboardData] = useState(null);

  useEffect(() => {
    const fetchDashboardData = async () => {
      try {
        const response = await fetch("/api/dashboard");
        if (response.ok) {
          const data = await response.json();
          setDashboardData(data);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      }
    };

    if (user) {
      fetchDashboardData();
    }
  }, [user]);

  if (!user) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      <h1 className="mb-4 text-2xl font-bold">Welcome, {user.name}</h1>
      {dashboardData && (
        <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
          <Card>
            <CardHeader>
              <CardTitle>Total Surveys</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-3xl font-bold">{dashboardData.totalSurveys}</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Active Participants</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-3xl font-bold">
                {dashboardData.activeParticipants}
              </p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Completed Surveys</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-3xl font-bold">
                {dashboardData.completedSurveys}
              </p>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}
```
## ./src/app/(pages)/(normal)/home/page.tsx
```
// src/app/(pages)/(normal)/home/page.tsx
import Link from "next/link";
import { Button } from "@/components/ui/button";

export default function Home() {
  return (
    <div className="flex min-h-screen flex-col items-center justify-center py-2">
      <h1 className="mb-8 text-4xl font-bold">Welcome to MyAmble</h1>
      <p className="mb-8 max-w-2xl text-center text-xl">
        Empowering social work research through innovative surveys and data
        analysis. Join our platform to create, distribute, and analyze surveys
        with ease.
      </p>
      <div className="flex space-x-4">
        <Link href="/login">
          <Button>Login</Button>
        </Link>
        <Link href="/sign-up">
          <Button variant="outline">Sign Up</Button>
        </Link>
      </div>
    </div>
  );
}
```
## ./src/app/(pages)/(normal)/home/Home.module.css
```

```
## ./src/app/(pages)/messenger/page.tsx
```
// src/app/(pages)/messenger/page.tsx
"use client";

import { useState, useEffect } from "react";
import { useAuth } from "~/hooks/useAuth";
import { Input } from "~/components/ui/input";
import { Button } from "~/components/ui/button";

export default function Messenger() {
  const { user } = useAuth();
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");

  useEffect(() => {
    if (user) {
      fetchMessages();
    }
  }, [user]);

  const fetchMessages = async () => {
    try {
      const response = await fetch("/api/messages");
      if (response.ok) {
        const data = await response.json();
        setMessages(data);
      }
    } catch (error) {
      console.error("Error fetching messages:", error);
    }
  };

  const sendMessage = async () => {
    if (!newMessage.trim()) return;

    try {
      const response = await fetch("/api/messages", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ content: newMessage, userId: user.id }),
      });

      if (response.ok) {
        setNewMessage("");
        fetchMessages();
      }
    } catch (error) {
      console.error("Error sending message:", error);
    }
  };

  return (
    <div className="container mx-auto px-4">
      <h1 className="mb-4 text-2xl font-bold">Messenger</h1>
      <div className="mb-4 rounded bg-white px-8 pb-8 pt-6 shadow-md">
        <div className="mb-4 h-64 overflow-y-auto">
          {messages.map((message) => (
            <div key={message.id} className="mb-2">
              <strong>{message.user.name}:</strong> {message.content}
            </div>
          ))}
        </div>
        <div className="flex">
          <Input
            type="text"
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            placeholder="Type a message..."
            className="mr-2 flex-grow"
          />
          <Button onClick={sendMessage}>Send</Button>
        </div>
      </div>
    </div>
  );
}
```
## ./src/app/(pages)/messenger/Messenger.module.css
```

```
## ./src/app/(pages)/(account)/sign-up/page.tsx
```
// src/app/(pages)/(account)/sign-up/page.tsx
"use client";

import { z } from "zod";
import { useAuth } from "@/hooks/useAuth";
import CustomForm from "@/components/Form";
import { useState } from "react";
import { Alert, AlertDescription } from "@/components/ui/alert";

const signUpSchema = z.object({
  name: z.string().min(2, "Name must be at least 2 characters"),
  email: z.string().email("Invalid email address"),
  password: z.string().min(8, "Password must be at least 8 characters"),
  role: z.enum(["SOCIAL_WORKER", "PARTICIPANT"], {
    required_error: "Please select a role",
  }),
});

export default function SignUp() {
  const { signUp } = useAuth();
  const [error, setError] = useState("");

  const handleSignUp = async (data) => {
    try {
      await signUp(data);
    } catch (err) {
      setError("An error occurred during sign up. Please try again.");
    }
  };

  return (
    <div className="mx-auto mt-8 max-w-md">
      <h1 className="mb-4 text-2xl font-bold">Sign Up</h1>
      {error && (
        <Alert variant="destructive" className="mb-4">
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
      <CustomForm
        fields={[
          { name: "name", label: "Name", type: "text" },
          { name: "email", label: "Email", type: "email" },
          { name: "password", label: "Password", type: "password" },
          {
            name: "role",
            label: "Role",
            type: "select",
            options: [
              { value: "SOCIAL_WORKER", label: "Social Worker" },
              { value: "PARTICIPANT", label: "Participant" },
            ],
          },
        ]}
        onSubmit={handleSignUp}
        validationSchema={signUpSchema}
      />
    </div>
  );
}
```
## ./src/app/(pages)/(account)/sign-up/Sign-up.module.css
```

```
## ./src/app/(pages)/(account)/account/page.tsx
```
// src/app/(pages)/(account)/account/page.tsx
"use client";

import { z } from "zod";
import { useAuth } from "~/hooks/useAuth";
import CustomForm from "~/components/Form";
import { useState } from "react";
import { Alert, AlertDescription } from "~/components/ui/alert";

const accountSchema = z.object({
  name: z.string().min(2, "Name must be at least 2 characters"),
  email: z.string().email("Invalid email address"),
});

export default function Account() {
  const { user, updateUser } = useAuth();
  const [message, setMessage] = useState({ type: "", content: "" });

  const handleUpdateProfile = async (data) => {
    try {
      await updateUser(data);
      setMessage({ type: "success", content: "Profile updated successfully" });
    } catch (err) {
      setMessage({ type: "error", content: "Failed to update profile" });
    }
  };

  if (!user) return <div>Loading...</div>;

  return (
    <div className="mx-auto mt-8 max-w-md">
      <h1 className="mb-4 text-2xl font-bold">Account Settings</h1>
      {message.content && (
        <Alert
          variant={message.type === "error" ? "destructive" : "default"}
          className="mb-4"
        >
          <AlertDescription>{message.content}</AlertDescription>
        </Alert>
      )}
      <CustomForm
        fields={[
          {
            name: "name",
            label: "Name",
            type: "text",
            defaultValue: user.name,
          },
          {
            name: "email",
            label: "Email",
            type: "email",
            defaultValue: user.email,
          },
        ]}
        onSubmit={handleUpdateProfile}
        validationSchema={accountSchema}
      />
    </div>
  );
}
```
## ./src/app/(pages)/(account)/account/Account.module.css
```

```
## ./src/app/(pages)/(account)/forgot-password/page.tsx
```

```
## ./src/app/(pages)/(account)/forgot-password/Forgot-password.module.css
```

```
## ./src/app/(pages)/(account)/login/page.tsx
```
// src/app/(pages)/(account)/login/page.tsx
"use client";

import { z } from "zod";
import { useAuth } from "@/hooks/useAuth";
import CustomForm from "@/components/Form";
import { useState } from "react";
import { Alert, AlertDescription } from "@/components/ui/alert";

const loginSchema = z.object({
  email: z.string().email("Invalid email address"),
  password: z.string().min(8, "Password must be at least 8 characters"),
});

export default function Login() {
  const { login } = useAuth();
  const [error, setError] = useState("");

  const handleLogin = async (data) => {
    try {
      await login(data);
    } catch (err) {
      setError("Invalid email or password. Please try again.");
    }
  };

  return (
    <div className="mx-auto mt-8 max-w-md">
      <h1 className="mb-4 text-2xl font-bold">Login</h1>
      {error && (
        <Alert variant="destructive" className="mb-4">
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
      <CustomForm
        fields={[
          { name: "email", label: "Email", type: "email" },
          { name: "password", label: "Password", type: "password" },
        ]}
        onSubmit={handleLogin}
        validationSchema={loginSchema}
      />
    </div>
  );
}
```
## ./src/app/(pages)/(account)/login/Login.module.css
```

```
## ./src/app/(pages)/(account)/reset-password/page.tsx
```
// src/app/(pages)/(account)/reset-password/page.tsx
"use client";

import { useState } from "react";
import { useSearchParams } from "next/navigation";
import { z } from "zod";
import CustomForm from "~/components/Form";
import { Alert, AlertDescription } from "~/components/ui/alert";

const resetPasswordSchema = z
  .object({
    password: z.string().min(8, "Password must be at least 8 characters"),
    confirmPassword: z
      .string()
      .min(8, "Password must be at least 8 characters"),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "Passwords don't match",
    path: ["confirmPassword"],
  });

export default function ResetPassword() {
  const [status, setStatus] = useState<"idle" | "success" | "error">("idle");
  const searchParams = useSearchParams();
  const token = searchParams.get("token");

  const handleResetPassword = async (data) => {
    if (!token) {
      setStatus("error");
      return;
    }

    try {
      const response = await fetch("/api/auth/reset-password", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ token, password: data.password }),
      });

      if (response.ok) {
        setStatus("success");
      } else {
        setStatus("error");
      }
    } catch (error) {
      console.error("Error resetting password:", error);
      setStatus("error");
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="mb-6 text-3xl font-bold">Reset Password</h1>
      {status === "idle" && (
        <CustomForm
          fields={[
            { name: "password", label: "New Password", type: "password" },
            {
              name: "confirmPassword",
              label: "Confirm New Password",
              type: "password",
            },
          ]}
          onSubmit={handleResetPassword}
          validationSchema={resetPasswordSchema}
        />
      )}
      {status === "success" && (
        <Alert>
          <AlertDescription>
            Your password has been successfully reset. You can now log in with
            your new password.
          </AlertDescription>
        </Alert>
      )}
      {status === "error" && (
        <Alert variant="destructive">
          <AlertDescription>
            Failed to reset your password. The reset link may be invalid or
            expired. Please request a new password reset.
          </AlertDescription>
        </Alert>
      )}
    </div>
  );
}
```
## ./src/app/(pages)/(account)/reset-password/Reset-password.module.css
```

```
## ./src/app/(pages)/(account)/verify-email/Verify-email.module.css
```

```
## ./src/app/(pages)/(account)/verify-email/page.tsx
```
// src/app/(pages)/(account)/verify-email/page.tsx
"use client";

import { useState, useEffect } from "react";
import { useSearchParams } from "next/navigation";
import { Alert, AlertDescription } from "~/components/ui/alert";
import { Button } from "~/components/ui/button";

export default function VerifyEmail() {
  const [status, setStatus] = useState<"loading" | "success" | "error">(
    "loading",
  );
  const searchParams = useSearchParams();
  const token = searchParams.get("token");

  useEffect(() => {
    const verifyEmail = async () => {
      if (!token) {
        setStatus("error");
        return;
      }

      try {
        const response = await fetch("/api/auth/verify-email", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ token }),
        });

        if (response.ok) {
          setStatus("success");
        } else {
          setStatus("error");
        }
      } catch (error) {
        console.error("Error verifying email:", error);
        setStatus("error");
      }
    };

    verifyEmail();
  }, [token]);

  const resendVerification = async () => {
    try {
      const response = await fetch("/api/auth/resend-verification", {
        method: "POST",
      });

      if (response.ok) {
        alert("Verification email sent. Please check your inbox.");
      } else {
        throw new Error("Failed to resend verification email");
      }
    } catch (error) {
      console.error("Error resending verification:", error);
      alert("Failed to resend verification email. Please try again later.");
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="mb-6 text-3xl font-bold">Email Verification</h1>
      {status === "loading" && <p>Verifying your email...</p>}
      {status === "success" && (
        <Alert>
          <AlertDescription>
            Your email has been successfully verified. You can now log in to
            your account.
          </AlertDescription>
        </Alert>
      )}
      {status === "error" && (
        <div>
          <Alert variant="destructive">
            <AlertDescription>
              Failed to verify your email. The verification link may be invalid
              or expired.
            </AlertDescription>
          </Alert>
          <Button onClick={resendVerification} className="mt-4">
            Resend Verification Email
          </Button>
        </div>
      )}
    </div>
  );
}
```
## ./src/app/Theme/Providers.tsx
```
"use client";
import { ThemeProvider } from "next-themes";
import { type ReactNode } from "react";

export function Providers({ children }: { children: ReactNode }) {
  return (
    <ThemeProvider enableSystem={true} attribute="class" defaultTheme="system">
      {children}
    </ThemeProvider>
  );
}
```
## ./src/app/_components/Layout.tsx
```
import "~/styles/globals.css";

import { Inter } from "next/font/google";
import { cookies } from "next/headers";

import { TRPCReactProvider } from "~/trpc/react";
import { Providers } from "./Theme/Providers";
import SideMenu from "./_components/ui/SideMenu/sidemenu";

const inter = Inter({
  subsets: ["latin"],
  variable: "--font-sans",
});

export const metadata = {
  title: "Create T3 App",
  description: "Generated by create-t3-app",
  icons: [{ rel: "icon", url: "/favicon.ico" }],
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={`font-sans ${inter.variable}`}>
        <TRPCReactProvider cookies={cookies().toString()}>
          <Providers>
            {children}
            <SideMenu />
          </Providers>
        </TRPCReactProvider>
      </body>
    </html>
  );
}
```
## ./src/app/_components/ui/menubar.tsx
```
"use client";

import * as React from "react";
import {
  CheckIcon,
  ChevronRightIcon,
  DotFilledIcon,
} from "@radix-ui/react-icons";
import * as MenubarPrimitive from "@radix-ui/react-menubar";

import { cn } from "~/app/lib/utils";

const MenubarMenu = MenubarPrimitive.Menu;

const MenubarGroup = MenubarPrimitive.Group;

const MenubarPortal = MenubarPrimitive.Portal;

const MenubarSub = MenubarPrimitive.Sub;

const MenubarRadioGroup = MenubarPrimitive.RadioGroup;

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm",
      className,
    )}
    {...props}
  />
));
Menubar.displayName = MenubarPrimitive.Root.displayName;

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className,
    )}
    {...props}
  />
));
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName;

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
));
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName;

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName;

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref,
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className,
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  ),
);
MenubarContent.displayName = MenubarPrimitive.Content.displayName;

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
MenubarItem.displayName = MenubarPrimitive.Item.displayName;

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
));
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName;

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <DotFilledIcon className="h-4 w-4 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
));
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName;

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
MenubarLabel.displayName = MenubarPrimitive.Label.displayName;

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName;

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className,
      )}
      {...props}
    />
  );
};
MenubarShortcut.displayname = "MenubarShortcut";

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
};

// src/app/_components/ui/menubar.tsx
import Link from "next/link";
import { useAuth } from "@/hooks/useAuth";
import { ThemeToggle } from "./ThemeToggle";

export function MenuBar() {
  const { user, logout } = useAuth();

  return (
    <header className="supports-backdrop-blur:bg-background/60 sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur">
      <div className="container flex h-14 items-center justify-between">
        <Link href="/" className="flex items-center space-x-2">
          <span className="text-xl font-bold">MyAmble</span>
        </Link>
        <nav className="flex items-center space-x-6 text-sm font-medium">
          {user ? (
            <>
              <Link href="/dashboard">Dashboard</Link>
              <Link href="/account">Account</Link>
              <button onClick={logout} className="text-red-500">
                Logout
              </button>
            </>
          ) : (
            <>
              <Link href="/login">Login</Link>
              <Link href="/sign-up">Sign Up</Link>
            </>
          )}
          <ThemeToggle />
        </nav>
      </div>
    </header>
  );
}
```
## ./src/app/_components/ui/SideMenu/sidemenu.tsx
```
"use client";

import React from "react";
import {
  Menubar,
  MenubarContent,
  MenubarItem,
  MenubarMenu,
  MenubarSeparator,
  MenubarShortcut,
  MenubarTrigger,
} from "~/app/_components/ui/menubar";
import { useTheme } from "next-themes";
import { cn } from "~/app/lib/utils";

export default function SideMenu() {
  const { theme, setTheme } = useTheme();
  return (
    <Menubar className="fixed bottom-3/4 right-0 w-20 cursor-pointer">
      <MenubarMenu>
        <MenubarTrigger className="cursor-pointer transition-colors duration-700 hover:bg-slate-300">
          Theme
        </MenubarTrigger>
        <MenubarContent>
          <MenubarItem
            onClick={() => setTheme("dark")}
            className={cn(
              "flex cursor-pointer justify-center rounded-lg px-2 transition-colors duration-300",
              theme === "dark" && "group bg-slate-300 font-bold text-black",
            )}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              height="1em"
              viewBox="0 0 384 512"
              className="transition-colors duration-300 group-hover:invert"
            >
              <path d="M223.5 32C100 32 0 132.3 0 256S100 480 223.5 480c60.6 0 115.5-24.2 155.8-63.4c5-4.9 6.3-12.5 3.1-18.7s-10.1-9.7-17-8.5c-9.8 1.7-19.8 2.6-30.1 2.6c-96.9 0-175.5-78.8-175.5-176c0-65.8 36-123.1 89.3-153.3c6.1-3.5 9.2-10.5 7.7-17.3s-7.3-11.9-14.3-12.5c-6.3-.5-12.6-.8-19-.8z" />
            </svg>
          </MenubarItem>
          <MenubarSeparator />
          <MenubarItem
            onClick={() => setTheme("light")}
            className={cn(
              "flex cursor-pointer justify-center rounded-lg px-2 invert transition-colors duration-300",
              theme === "light" && "group bg-slate-300 font-bold text-black",
            )}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              height="1em"
              viewBox="0 0 512 512"
              className="transition-colors duration-300 "
            >
              <path d="M375.7 19.7c-1.5-8-6.9-14.7-14.4-17.8s-16.1-2.2-22.8 2.4L256 61.1 173.5 4.2c-6.7-4.6-15.3-5.5-22.8-2.4s-12.9 9.8-14.4 17.8l-18.1 98.5L19.7 136.3c-8 1.5-14.7 6.9-17.8 14.4s-2.2 16.1 2.4 22.8L61.1 256 4.2 338.5c-4.6 6.7-5.5 15.3-2.4 22.8s9.8 13 17.8 14.4l98.5 18.1 18.1 98.5c1.5 8 6.9 14.7 14.4 17.8s16.1 2.2 22.8-2.4L256 450.9l82.5 56.9c6.7 4.6 15.3 5.5 22.8 2.4s12.9-9.8 14.4-17.8l18.1-98.5 98.5-18.1c8-1.5 14.7-6.9 17.8-14.4s2.2-16.1-2.4-22.8L450.9 256l56.9-82.5c4.6-6.7 5.5-15.3 2.4-22.8s-9.8-12.9-17.8-14.4l-98.5-18.1L375.7 19.7zM269.6 110l65.6-45.2 14.4 78.3c1.8 9.8 9.5 17.5 19.3 19.3l78.3 14.4L402 242.4c-5.7 8.2-5.7 19 0 27.2l45.2 65.6-78.3 14.4c-9.8 1.8-17.5 9.5-19.3 19.3l-14.4 78.3L269.6 402c-8.2-5.7-19-5.7-27.2 0l-65.6 45.2-14.4-78.3c-1.8-9.8-9.5-17.5-19.3-19.3L64.8 335.2 110 269.6c5.7-8.2 5.7-19 0-27.2L64.8 176.8l78.3-14.4c9.8-1.8 17.5-9.5 19.3-19.3l14.4-78.3L242.4 110c8.2 5.7 19 5.7 27.2 0zM256 368a112 112 0 1 0 0-224 112 112 0 1 0 0 224zM192 256a64 64 0 1 1 128 0 64 64 0 1 1 -128 0z" />
            </svg>
          </MenubarItem>
        </MenubarContent>
      </MenubarMenu>
    </Menubar>
  );
}

// src/app/_components/ui/SideMenu/sidemenu.tsx
import Link from "next/link";
import { useAuth } from "@/hooks/useAuth";

export default function SideMenu() {
  const { user } = useAuth();

  if (!user) return null;

  return (
    <aside className="w-64 bg-gray-100 p-6">
      <nav>
        <ul className="space-y-2">
          <li>
            <Link href="/dashboard" className="hover:underline">
              Dashboard
            </Link>
          </li>
          {user.role === "SOCIAL_WORKER" && (
            <>
              <li>
                <Link href="/survey-builder" className="hover:underline">
                  Survey Builder
                </Link>
              </li>
              <li>
                <Link href="/user-management" className="hover:underline">
                  User Management
                </Link>
              </li>
            </>
          )}
          <li>
            <Link href="/messenger" className="hover:underline">
              Messenger
            </Link>
          </li>
          <li>
            <Link href="/myamble-ai" className="hover:underline">
              MyAmble AI
            </Link>
          </li>
        </ul>
      </nav>
    </aside>
  );
}
```
## ./src/app/_components/Sidemenu.tsx
```
// components/SideMenu.tsx
import Link from "next/link";
import { useAuth } from "@/hooks/useAuth";

export default function SideMenu() {
  const { user } = useAuth();

  if (!user) return null;

  return (
    <aside className="w-64 bg-gray-100 p-6">
      <nav>
        <ul className="space-y-2">
          <li>
            <Link href="/dashboard" className="hover:underline">
              Dashboard
            </Link>
          </li>
          {user.role === "SOCIAL_WORKER" && (
            <>
              <li>
                <Link href="/survey-builder" className="hover:underline">
                  Survey Builder
                </Link>
              </li>
              <li>
                <Link href="/user-management" className="hover:underline">
                  User Management
                </Link>
              </li>
            </>
          )}
          <li>
            <Link href="/messenger" className="hover:underline">
              Messenger
            </Link>
          </li>
          <li>
            <Link href="/myamble-ai" className="hover:underline">
              MyAmble AI
            </Link>
          </li>
        </ul>
      </nav>
    </aside>
  );
}
```
## ./src/app/_components/Header.tsx
```
// components/Header.tsx
import Link from "next/link";
import { ThemeToggle } from "./ThemeToggle";
import { useAuth } from "@/hooks/useAuth";

export default function Header() {
  const { user, logout } = useAuth();

  return (
    <header className="supports-backdrop-blur:bg-background/60 sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur">
      <div className="container flex h-14 items-center justify-between">
        <Link href="/" className="flex items-center space-x-2">
          <span className="text-xl font-bold">MyAmble</span>
        </Link>
        <nav className="flex items-center space-x-6 text-sm font-medium">
          {user ? (
            <>
              <Link href="/dashboard">Dashboard</Link>
              <Link href="/account">Account</Link>
              <button onClick={logout} className="text-red-500">
                Logout
              </button>
            </>
          ) : (
            <>
              <Link href="/login">Login</Link>
              <Link href="/sign-up">Sign Up</Link>
            </>
          )}
          <ThemeToggle />
        </nav>
      </div>
    </header>
  );
}
```
## ./src/app/_components/Form.tsx
```
// components/Form.tsx
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

interface FormProps {
  fields: {
    name: string;
    label: string;
    type: string;
    options?: { value: string; label: string }[];
  }[];
  onSubmit: (data: any) => void;
  validationSchema: z.ZodObject<any>;
}

export default function CustomForm({
  fields,
  onSubmit,
  validationSchema,
}: FormProps) {
  const form = useForm<z.infer<typeof validationSchema>>({
    resolver: zodResolver(validationSchema),
  });

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        {fields.map((field) => (
          <FormField
            key={field.name}
            control={form.control}
            name={field.name}
            render={({ field: formField }) => (
              <FormItem>
                <FormLabel>{field.label}</FormLabel>
                <FormControl>
                  {field.type === "select" ? (
                    <Select
                      onValueChange={formField.onChange}
                      defaultValue={formField.value}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder={`Select ${field.label}`} />
                      </SelectTrigger>
                      <SelectContent>
                        {field.options?.map((option) => (
                          <SelectItem key={option.value} value={option.value}>
                            {option.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <Input type={field.type} {...formField} />
                  )}
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        ))}
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  );
}
```
## ./src/app/_components/create-post.tsx
```
"use client";

import { useRouter } from "next/navigation";
import { useState } from "react";

import { api } from "~/trpc/react";

export function CreatePost() {
  const router = useRouter();
  const [name, setName] = useState("");

  const createPost = api.post.create.useMutation({
    onSuccess: () => {
      router.refresh();
      setName("");
    },
  });

  return (
    <form
      onSubmit={(e) => {
        e.preventDefault();
        createPost.mutate({ name });
      }}
      className="flex flex-col gap-2"
    >
      <input
        type="text"
        placeholder="Title"
        value={name}
        onChange={(e) => setName(e.target.value)}
        className="w-full rounded-full px-4 py-2 text-black"
      />
      <button
        type="submit"
        className="rounded-full bg-white/10 px-10 py-3 font-semibold transition hover:bg-white/20"
        disabled={createPost.isLoading}
      >
        {createPost.isLoading ? "Submitting..." : "Submit"}
      </button>
    </form>
  );
}
```
## ./src/app/_components/Footer.tsx
```
// components/Footer.tsx
export default function Footer() {
  return (
    <footer className="border-t py-6 md:py-0">
      <div className="container flex flex-col items-center justify-between gap-4 md:h-24 md:flex-row">
        <p className="text-center text-sm leading-loose text-muted-foreground md:text-left">
          Built by MyAmble. The source code is available on GitHub.
        </p>
        <nav className="flex items-center space-x-4">
          <a
            href="/privacy"
            className="text-sm text-muted-foreground hover:underline"
          >
            Privacy Policy
          </a>
          <a
            href="/terms"
            className="text-sm text-muted-foreground hover:underline"
          >
            Terms of Service
          </a>
          <a
            href="/help"
            className="text-sm text-muted-foreground hover:underline"
          >
            Help
          </a>
        </nav>
      </div>
    </footer>
  );
}
```
## ./src/server/api/root.ts
```
// src/server/api/root.ts
import { createTRPCRouter } from "~/server/api/trpc";
import { surveyRouter } from "~/server/api/routers/survey";

export const appRouter = createTRPCRouter({
  survey: surveyRouter,
});

export type AppRouter = typeof appRouter;
```
## ./src/server/api/trpc.ts
```
/**
 * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:
 * 1. You want to modify request context (see Part 1).
 * 2. You want to create a new middleware or type of procedure (see Part 3).
 *
 * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will
 * need to use are documented accordingly near the end.
 */

import { initTRPC, TRPCError } from "@trpc/server";
import { type NextRequest } from "next/server";
import superjson from "superjson";
import { ZodError } from "zod";

import { getServerAuthSession } from "~/server/auth";
import { db } from "~/server/db";

/**
 * 1. CONTEXT
 *
 * This section defines the "contexts" that are available in the backend API.
 *
 * These allow you to access things when processing a request, like the database, the session, etc.
 */

interface CreateContextOptions {
  headers: Headers;
}

/**
 * This helper generates the "internals" for a tRPC context. If you need to use it, you can export
 * it from here.
 *
 * Examples of things you may need it for:
 * - testing, so we don't have to mock Next.js' req/res
 * - tRPC's `createSSGHelpers`, where we don't have req/res
 *
 * @see https://create.t3.gg/en/usage/trpc#-serverapitrpcts
 */
export const createInnerTRPCContext = async (opts: CreateContextOptions) => {
  const session = await getServerAuthSession();

  return {
    session,
    headers: opts.headers,
    db,
  };
};

/**
 * This is the actual context you will use in your router. It will be used to process every request
 * that goes through your tRPC endpoint.
 *
 * @see https://trpc.io/docs/context
 */
export const createTRPCContext = async (opts: { req: NextRequest }) => {
  // Fetch stuff that depends on the request

  return await createInnerTRPCContext({
    headers: opts.req.headers,
  });
};

/**
 * 2. INITIALIZATION
 *
 * This is where the tRPC API is initialized, connecting the context and transformer. We also parse
 * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation
 * errors on the backend.
 */

const t = initTRPC.context<typeof createTRPCContext>().create({
  transformer: superjson,
  errorFormatter({ shape, error }) {
    return {
      ...shape,
      data: {
        ...shape.data,
        zodError:
          error.cause instanceof ZodError ? error.cause.flatten() : null,
      },
    };
  },
});

/**
 * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)
 *
 * These are the pieces you use to build your tRPC API. You should import these a lot in the
 * "/src/server/api/routers" directory.
 */

/**
 * This is how you create new routers and sub-routers in your tRPC API.
 *
 * @see https://trpc.io/docs/router
 */
export const createTRPCRouter = t.router;

/**
 * Public (unauthenticated) procedure
 *
 * This is the base piece you use to build new queries and mutations on your tRPC API. It does not
 * guarantee that a user querying is authorized, but you can still access user session data if they
 * are logged in.
 */
export const publicProcedure = t.procedure;

/** Reusable middleware that enforces users are logged in before running the procedure. */
const enforceUserIsAuthed = t.middleware(({ ctx, next }) => {
  if (!ctx.session || !ctx.session.user) {
    throw new TRPCError({ code: "UNAUTHORIZED" });
  }
  return next({
    ctx: {
      // infers the `session` as non-nullable
      session: { ...ctx.session, user: ctx.session.user },
    },
  });
});

/**
 * Protected (authenticated) procedure
 *
 * If you want a query or mutation to ONLY be accessible to logged in users, use this. It verifies
 * the session is valid and guarantees `ctx.session.user` is not null.
 *
 * @see https://trpc.io/docs/procedures
 */
export const protectedProcedure = t.procedure.use(enforceUserIsAuthed);
```
## ./src/server/api/routers/survey.ts
```
// src/server/api/routers/survey.ts
import { z } from "zod";
import { createTRPCRouter, protectedProcedure } from "~/server/api/trpc";
import { survey } from "~/server/db/schema";

export const surveyRouter = createTRPCRouter({
  create: protectedProcedure
    .input(
      z.object({
        title: z.string().optional(),
        description: z.string().optional(),
        data: z.any(),
      }),
    )
    .mutation(async ({ ctx, input }) => {
      const newSurvey = await ctx.db
        .insert(survey)
        .values({
          name: input.title || "Untitled Survey",
          description: input.description || "",
          creatorId: ctx.session.user.id,
          data: input.data,
        })
        .returning();

      return newSurvey[0];
    }),
});
```
## ./src/server/api/routers/post.example.ts
```
import { z } from "zod";

import {
  createTRPCRouter,
  protectedProcedure,
  publicProcedure,
} from "~/server/api/trpc";

/**
 * This is just an example router for you to get started.
 * You can delete it if you're not using it.
 */
export const postExampleRouter = createTRPCRouter({
  // hello: publicProcedure
  //   .input(z.object({ text: z.string() }))
  //   .query(({ input }) => {
  //     return {
  //       greeting: `Hello ${input.text}`,
  //     };
  //   }),
  // create: protectedProcedure
  //   .input(z.object({ name: z.string().min(1) }))
  //   .mutation(async ({ ctx, input }) => {
  //     // simulate a slow db call
  //     await new Promise((resolve) => setTimeout(resolve, 1000));
  //     await ctx.db.insert(posts).values({
  //       name: input.name,
  //       createdById: ctx.session.user.id,
  //     });
  //   }),
  // getLatest: publicProcedure.query(({ ctx }) => {
  //   return ctx.db.query.posts.findFirst({
  //     orderBy: (posts, { desc }) => [desc(posts.createdAt)],
  //   });
  // }),
  // getSecretMessage: protectedProcedure.query(() => {
  //   return "you can now see this secret message!";
  // }),
});
```
## ./src/server/db/schema.ts
```
import {
  timestamp,
  text,
  primaryKey,
  integer,
  pgTableCreator,
  bigint,
  varchar,
  pgEnum,
  PgColumn,
  jsonb,
} from "drizzle-orm/pg-core";
import type { AdapterAccount } from "@auth/core/adapters";

/**
 * This is an example of how to use the multi-project schema feature of Drizzle ORM. Use the same
 * database instance for multiple projects.
 *
 * @see https://orm.drizzle.team/docs/goodies#multi-project-schema
 */

export const pgTable = pgTableCreator((name) => `myamble_${name}`);

// application level tables
export const roleEnum = pgEnum("role", ["USER", "OWNER"]);

export const users = pgTable("user", {
  id: text("id").notNull().primaryKey(),
  name: text("name"),
  email: text("email").notNull(),
  emailVerified: timestamp("emailVerified", { mode: "date" }),
  image: text("image"),
  role: roleEnum("role").default("USER"),
  adminUserId: text("adminUserId").references((): PgColumn => users.id, {
    onDelete: "no action",
  }),
});
export const UserSelect = users.$inferSelect;
export const UserInsert = users.$inferInsert;

export const survey = pgTable("survey", {
  id: text("id").notNull().primaryKey(),
  name: text("name").notNull(),
  description: text("description"),
  createdAt: timestamp("createdAt", { mode: "date" }).defaultNow(),
  updatedAt: timestamp("updatedAt", { mode: "date" }).defaultNow(),
  creatorId: text("creatorId").references((): PgColumn => users.id, {
    onDelete: "cascade",
  }),
  data: jsonb("data"),
});
export const SurveySelect = survey.$inferSelect;
export const SurveyInsert = survey.$inferInsert;

export const surveyAssignment = pgTable("survey_assignment", {
  id: text("id").notNull().primaryKey(),
  createdAt: timestamp("createdAt", { mode: "date" }).defaultNow(),
  updatedAt: timestamp("updatedAt", { mode: "date" }).defaultNow(),
  surveyId: text("surveyId").references((): PgColumn => survey.id, {
    onDelete: "cascade",
  }),
  occurrence: text("occurrence")
    .$type<"once" | "daily" | "weekly" | "monthly">()
    .notNull(),
  startDate: timestamp("startDate", { mode: "date" }).notNull(),
  endDate: timestamp("endDate", { mode: "date" }),
});
export const SurveyAssignmentSelect = surveyAssignment.$inferSelect;
export const SurveyAssignmentInsert = surveyAssignment.$inferInsert;

export const surveySubmission = pgTable("survey_submission", {
  id: text("id").notNull().primaryKey(),
  createdAt: timestamp("createdAt", { mode: "date" }).defaultNow(),
  updatedAt: timestamp("updatedAt", { mode: "date" }).defaultNow(),
  surveyAssignmentId: text("surveyAssignmentId").references(
    (): PgColumn => surveyAssignment.id,
    {
      onDelete: "cascade",
    },
  ),
  data: jsonb("data"),
});
export const SurveySubmissionSelect = surveySubmission.$inferSelect;
export const SurveySubmissionInsert = surveySubmission.$inferInsert;

export const conversation = pgTable("conversation", {
  id: text("id").notNull().primaryKey(),
  createdAt: timestamp("createdAt", { mode: "date" }).defaultNow(),
  updatedAt: timestamp("updatedAt", { mode: "date" }).defaultNow(),
});
export const ConversationSelect = conversation.$inferSelect;
export const ConversationInsert = conversation.$inferInsert;

export const conversationParticipant = pgTable(
  "conversation_participant",
  {
    userId: text("userId")
      .notNull()
      .references(() => users.id, {
        onDelete: "cascade",
      }),
    conversationId: text("conversationId")
      .notNull()
      .references(() => conversation.id, {
        onDelete: "cascade",
      }),
  },
  (userConversation: any) => ({
    primaryKey: primaryKey(
      userConversation.userId,
      userConversation.conversationId,
    ),
  }),
);
export const ConversationParticipantSelect =
  conversationParticipant.$inferSelect;
export const ConversationParticipantInsert =
  conversationParticipant.$inferInsert;

export const message = pgTable("message", {
  id: text("id").notNull().primaryKey(),
  createdAt: timestamp("createdAt", { mode: "date" }).defaultNow(),
  updatedAt: timestamp("updatedAt", { mode: "date" }).defaultNow(),
  content: text("content"),
  conversationId: text("conversationId").references(
    (): PgColumn => conversation.id,
    {
      onDelete: "cascade",
    },
  ),
});
export const MessageSelect = message.$inferSelect;
export const MessageInsert = message.$inferInsert;

// system stuff
export const accounts = pgTable(
  "account",
  {
    userId: text("userId")
      .notNull()
      .references(() => users.id, { onDelete: "cascade" }),
    type: text("type").$type<AdapterAccount["type"]>().notNull(),
    provider: text("provider").notNull(),
    providerAccountId: text("providerAccountId").notNull(),
    refresh_token: text("refresh_token"),
    access_token: text("access_token"),
    expires_at: integer("expires_at"),
    token_type: text("token_type"),
    refresh_token_expires_in: integer("refresh_token_expires_in"),
    scope: text("scope"),
    id_token: text("id_token"),
    session_state: text("session_state"),
  },
  (account: any) => ({
    compoundKey: primaryKey(account.provider, account.providerAccountId),
  }),
);
export const AccountSelect = accounts.$inferSelect;
export const AccountInsert = accounts.$inferInsert;

export const sessions = pgTable("session", {
  sessionToken: text("sessionToken").notNull().primaryKey(),
  userId: text("userId")
    .notNull()
    .references(() => users.id, { onDelete: "cascade" }),
  expires: timestamp("expires", { mode: "date" }).notNull(),
});
export const SessionSelect = sessions.$inferSelect;
export const SessionInsert = sessions.$inferInsert;

export const verificationTokens = pgTable(
  "verificationToken",
  {
    identifier: text("identifier").notNull(),
    token: text("token").notNull(),
    expires: timestamp("expires", { mode: "date" }).notNull(),
  },
  (vt: any) => ({
    compoundKey: primaryKey(vt.identifier, vt.token),
  }),
);
export const VerificationTokenSelect = verificationTokens.$inferSelect;
export const VerificationTokenInsert = verificationTokens.$inferInsert;
```
## ./src/server/db/surveyTypes.ts
```
// export type Survey = {
//   questions: Question[];
// };

// // Base type for all questions
// export type BaseQuestion = {
//   id: string;
//   type: QuestionTypeStr;
//   heading: string;
//   body: string;
//   required: boolean;
// };

// export type HasID = {
//   id: string;
// };

// // Specific question types
// export type SingleSelectQuestion = BaseQuestion & {
//   type: QuestionTypeStr.single_select;
//   singleSelectOptions: HasID &
//     {
//       icon: string;
//       label: string;
//     }[];
//   defaultSingleSelectOption: HasID;
// };

// export type MultiSelectQuestion = BaseQuestion & {
//   type: QuestionTypeStr.multi_select;
//   multiSelectOptions: HasID &
//     {
//       icon: string;
//       label: string;
//     }[];
//   defaultMultiSelectOptions: HasID[];
// };

// export type NumberQuestion = BaseQuestion & {
//   type: QuestionTypeStr.number;
//   numberMin: number;
//   numberMax: number;
//   numberStep: number;
//   defaultNumber: number;
// };

// export type TimeQuestion = BaseQuestion & {
//   type: QuestionTypeStr.time;
//   timeMin: string;
//   timeMax: string;
//   defaultTime: string;
// };

// export type DateQuestion = BaseQuestion & {
//   type: QuestionTypeStr.date;
//   includeTime: boolean;
//   dateMin: string | "past" | "future";
//   dateMax: string | "past" | "future";
//   defaultDate: string;
// };

// export type YesNoQuestion = BaseQuestion & {
//   type: QuestionTypeStr.yes_no;
//   defaultYesNo: "yes" | "no";
// };

// export type RatingQuestion = BaseQuestion & {
//   type: QuestionTypeStr.rating;
//   defaultRating: number;
// };

// export type LongTextQuestion = BaseQuestion & {
//   type: QuestionTypeStr.long_text;
//   defaultLongText: string;
// };

// export type ShortTextQuestion = BaseQuestion & {
//   type: QuestionTypeStr.short_text;
//   defaultShortText: string;
// };

// export type NumberRangeQuestion = BaseQuestion & {
//   type: QuestionTypeStr.number_range;
//   numberRangeMin: number;
//   numberRangeMax: number;
//   numberRangeStep: number;
//   numberRangeMinSep: number;
//   numberRangeMaxSep: number;
//   defaultNumberRange: number;
// };

// export type TimeRangeQuestion = BaseQuestion & {
//   type: QuestionTypeStr.time_range;
//   timeRangeMin: string;
//   timeRangeMax: string;
//   timeRangeMinSep: string;
//   timeRangeMaxSep: string;
//   defaultTimeRange: string;
// };

// export type DateRangeQuestion = BaseQuestion & {
//   type: QuestionTypeStr.date_range;
//   includeTime: boolean;
//   dateRangeMin: string | "past" | "future";
//   dateRangeMax: string | "past" | "future";
//   dateRangeMinSep: string | "past" | "future";
//   dateRangeMaxSep: string | "past" | "future";
//   defaultDateRange: string;
// };

// // Union type for any question
// export type AnyQuestion =
//   | SingleSelectQuestion
//   | MultiSelectQuestion
//   | NumberQuestion
//   | DateQuestion
//   | YesNoQuestion
//   | RatingQuestion
//   | LongTextQuestion
//   | ShortTextQuestion
//   | NumberRangeQuestion
//   | DateRangeQuestion;

// export enum QuestionTypeStr {
//   single_select,
//   multi_select,
//   number,
//   time,
//   date,
//   yes_no,
//   rating,
//   long_text,
//   short_text,
//   number_range,
//   time_range,
//   date_range,
// }

// export const QuestionTypes = [
//   {
//     id: QuestionTypeStr.single_select,
//     name: "Single Select",
//     icon: "single_select",
//   },
//   {
//     id: QuestionTypeStr.multi_select,
//     name: "Multi Select",
//     icon: "multi_select",
//   },
//   {
//     id: QuestionTypeStr.number,
//     name: "Number",
//     icon: "number",
//   },
//   {
//     id: QuestionTypeStr.date,
//     name: "Date",
//     icon: "date",
//   },
//   {
//     id: QuestionTypeStr.yes_no,
//     name: "Yes/No",
//     icon: "yes_no",
//   },
//   {
//     id: QuestionTypeStr.rating,
//     name: "Rating",
//     icon: "rating",
//   },
//   {
//     id: QuestionTypeStr.long_text,
//     name: "Long Text",
//     icon: "long_text",
//   },
//   {
//     id: QuestionTypeStr.short_text,
//     name: "Short Text",
//     icon: "short_text",
//   },
//   {
//     id: QuestionTypeStr.number_range,
//     name: "Number Range",
//     icon: "number_range",
//   },
//   {
//     id: QuestionTypeStr.date_range,
//     name: "Date Range",
//     icon: "date_range",
//   },
// ];
```
## ./src/server/db/index.ts
```
import { drizzle } from "drizzle-orm/node-postgres";
import { Client } from "pg";

import { env } from "~/env.mjs";
import * as schema from "./schema";

const client = new Client({
  connectionString: env.DATABASE_URL,
});

await client.connect();
export const db = drizzle(client, {
  schema: schema
});
```
## ./src/server/auth.ts
```
import { DrizzleAdapter } from "@auth/drizzle-adapter";
import { sql } from "drizzle-orm";
import {
  getServerSession,
  type DefaultSession,
  type NextAuthOptions,
  type Session,
} from "next-auth";
import { type DefaultJWT, type JWT } from "next-auth/jwt";
import GithubProvider from "next-auth/providers/github";

import { env } from "~/env.mjs";
import { db } from "~/server/db";
import { pgTable, users } from "~/server/db/schema";

/**
 * Module augmentation for `next-auth` types. Allows us to add custom properties to the `session`
 * object and keep type safety.
 *
 * @see https://next-auth.js.org/getting-started/typescript#module-augmentation
 */

enum UserRole {
  USER = "USER",
  ADMIN = "OWNER",
}
declare module "next-auth" {
  interface Session extends DefaultSession {
    user: {
      id: string;
      role: UserRole;
    } & DefaultSession["user"];
  }

  interface User {
    role: UserRole;
  }
}
declare module "next-auth/adapters" {
  export interface AdapterUser {
    role?: UserRole;
  }
}
declare module "next-auth/jwt" {
  /**
   * Returned by `useSession`, `getSession` and received as a prop on the `SessionProvider` React Context
   */

  interface JWT extends DefaultJWT {
    id: string;
    role: UserRole;
    emailVerified: Date | null;
  }
}
/**
 * Options for NextAuth.js used to configure adapters, providers, callbacks, etc.
 *
 * @see https://next-auth.js.org/configuration/options
 */
export const authOptions: NextAuthOptions = {
  callbacks: {
    session({ session, token }: { session: Session; token: JWT }) {
      if (token) {
        session.user.id = token.id;
        session.user.email = token.email;
        session.user.role = token.role;
        session.user.image = token.picture; // replace 'image' with 'picture'
      }
      return session;
    },
    jwt: async ({ token }: { token: JWT }) => {
      const userCheck = await db
        .select()
        .from(users)
        .where(sql`${users.email} = ${token.email}`);
      const dbUser = userCheck[0];

      if (!dbUser) {
        console.log("No User");
        throw new Error("Unable to find user");
      }

      return {
        id: dbUser.id,
        role: dbUser.role as UserRole,
        email: dbUser.email,
        emailVerified: dbUser.emailVerified,
        name: dbUser.name,
        picture: dbUser.image,
        sub: token.sub,
      };
    },
    async signIn({ user, account, profile }) {
      console.log(user)
      console.log(account)
      console.log(profile)

      const isAllowedToSignIn = true; // You can add your own login logic here
      if (isAllowedToSignIn) {
        return `/`; // Redirect to a specific page after sign in
      } else {
        // Return false to display a default error message
        return false;
      }
    },
  },
  session: {
    strategy: "jwt",
  },
  jwt: {
    secret: env.NEXTAUTH_SECRET,
  },
  secret: env.NEXTAUTH_SECRET,
  adapter: DrizzleAdapter(db, pgTable),
  providers: [
    GithubProvider({
      clientId: env.GITHUB_CLIENT_ID,
      clientSecret: env.GITHUB_CLIENT_SECRET,
    }),
  ],
  pages: {},
};

export const getServerAuthSession = () => getServerSession(authOptions);
```
## ./src/trpc/server.ts
```
import {
  createTRPCProxyClient,
  loggerLink,
  unstable_httpBatchStreamLink,
} from "@trpc/client";
import { cookies } from "next/headers";

import { type AppRouter } from "~/server/api/root";
import { getUrl, transformer } from "./shared";

export const api = createTRPCProxyClient<AppRouter>({
  transformer,
  links: [
    loggerLink({
      enabled: (op) =>
        process.env.NODE_ENV === "development" ||
        (op.direction === "down" && op.result instanceof Error),
    }),
    unstable_httpBatchStreamLink({
      url: getUrl(),
      headers() {
        return {
          cookie: cookies().toString(),
          "x-trpc-source": "rsc",
        };
      },
    }),
  ],
});
```
## ./src/trpc/react.tsx
```
"use client";

import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { loggerLink, unstable_httpBatchStreamLink } from "@trpc/client";
import { createTRPCReact } from "@trpc/react-query";
import { useState } from "react";

import { type AppRouter } from "~/server/api/root";
import { getUrl, transformer } from "./shared";

export const api = createTRPCReact<AppRouter>();

export function TRPCReactProvider(props: {
  children: React.ReactNode;
  cookies: string;
}) {
  const [queryClient] = useState(() => new QueryClient());

  const [trpcClient] = useState(() =>
    api.createClient({
      transformer,
      links: [
        loggerLink({
          enabled: (op) =>
            process.env.NODE_ENV === "development" ||
            (op.direction === "down" && op.result instanceof Error),
        }),
        unstable_httpBatchStreamLink({
          url: getUrl(),
          headers() {
            return {
              cookie: props.cookies,
              "x-trpc-source": "react",
            };
          },
        }),
      ],
    })
  );

  return (
    <QueryClientProvider client={queryClient}>
      <api.Provider client={trpcClient} queryClient={queryClient}>
        {props.children}
      </api.Provider>
    </QueryClientProvider>
  );
}
```
## ./src/trpc/shared.ts
```
import { type inferRouterInputs, type inferRouterOutputs } from "@trpc/server";
import superjson from "superjson";

import { type AppRouter } from "~/server/api/root";

export const transformer = superjson;

function getBaseUrl() {
  if (typeof window !== "undefined") return "";
  if (process.env.VERCEL_URL) return `https://${process.env.VERCEL_URL}`;
  return `http://localhost:${process.env.PORT ?? 3000}`;
}

export function getUrl() {
  return getBaseUrl() + "/api/trpc";
}

/**
 * Inference helper for inputs.
 *
 * @example type HelloInput = RouterInputs['example']['hello']
 */
export type RouterInputs = inferRouterInputs<AppRouter>;

/**
 * Inference helper for outputs.
 *
 * @example type HelloOutput = RouterOutputs['example']['hello']
 */
export type RouterOutputs = inferRouterOutputs<AppRouter>;
```
## ./README.md
```
# T3 PostgreSQL Template with Drizzle and NextAuth

A Quick Template for converting the experimental App router version for the T3 stack into connecting to a PostgreSQL server instead of planetscale / MySQL. Uses JWT tokens and has template code for adding extra session props like role. Works with Github OAuth out of the box

## Features

- Feature 1: Configuration of DrizzleORM to allow for PostgreSQL Integration with Next-Auth.
- Feature 2: Custom Template code for adding properties to sessions upon Authorization.
- Feature 3: Addition of Github as an OAuth provider - with the necessary DrizzleORM schema defined.

## Prerequisites

Before you begin, ensure you have met the following requirements:

- Node.js installed 
- A PostgreSQL database set up
- Git installed on your machine

## How to Get Started

Follow these steps to get your development environment running:

### 1. Clone the Repository

First, clone the project repository to your local machine:

```bash
git clone https://github.com/EthanAmato/T3-Postgres-Drizzle-Template
```

### 2. Navigate to the Project Directory

After cloning, change into the project directory:

```bash
cd [project directory]
```
Replace `[project directory]` with the name of the folder where the repository was cloned.

### 3. Install Dependencies

Install the necessary Node.js dependencies:

```bash
npm install
```

This command will install all dependencies listed in your `package.json` file.

### 4. Set Up the Database

Ensure your PostgreSQL database is running. Then, set up the database structure using the following command from Drizzle-Kit:

```bash
npm run db:push
```

This command will create the necessary tables and structures in your database as defined in your project.

### 5. Start the Development Server

Finally, start the development server:

```bash
npm run dev
```

This will start the server on a default port (usually 3000) and you can access the application in your browser at `http://localhost:3000`.

## Contributing

If you want to contribute to this project, please follow these steps:

1. Fork the repository.
2. Create a new branch: `git checkout -b branch-name`.
3. Make your changes and commit them: `git commit -m 'commit message'`.
4. Push to the original branch: `git push origin [project name]/[location]`.
5. Create the pull request.

Alternatively, see the GitHub documentation on [creating a pull request](https://help.github.com/articles/creating-a-pull-request/).

## License

MIT License

Copyright (c) [year] [fullname]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
```
## ./.eslintrc.cjs
```
/** @type {import("eslint").Linter.Config} */
const config = {
  parser: "@typescript-eslint/parser",
  parserOptions: {
    project: true,
  },
  plugins: ["@typescript-eslint"],
  extends: [
    "next/core-web-vitals",
    "plugin:@typescript-eslint/recommended-type-checked",
    "plugin:@typescript-eslint/stylistic-type-checked",
  ],
  rules: {
    // These opinionated rules are enabled in stylistic-type-checked above.
    // Feel free to reconfigure them to your own preference.
    "@typescript-eslint/array-type": "off",
    "@typescript-eslint/consistent-type-definitions": "off",

    "@typescript-eslint/consistent-type-imports": [
      "warn",
      {
        prefer: "type-imports",
        fixStyle: "inline-type-imports",
      },
    ],
    "@typescript-eslint/no-unused-vars": ["warn", { argsIgnorePattern: "^_" }],
    "@typescript-eslint/no-misused-promises": [
      2,
      {
        checksVoidReturn: { attributes: false },
      },
    ],
  },
};

module.exports = config;
```
## ./DOCKERFILE
```
# Receive build mode argument
ARG MODE=local

# Use the official Node.js 18 image.
FROM node:18-alpine

# Create and change to the app directory.
WORKDIR /usr/src/app

# Copy application dependency manifests to the container image.
COPY package*.json ./

# Install production dependencies.
RUN npm install --only=production

# Copy local code to the container image.
COPY . .

# Copy the appropriate .env file based on the build mode
COPY .env.${MODE} ./.env

# Build the application.
RUN npm run build

# Run the application on container startup.
CMD [ "npm", "start" ]
```
## ./public/favicon.ico
```
 h6   (û00 h&∆(  ÓË·LÔÁ‰AÒÍ„$ÔË‚éË·µË·ôÒÁ‚5Ë‚¿ÒÈ„§ÛÁ‰AË‚ÙË·ÁÔË‚±Ë‚‹Ë‚¸ÔË‚bË‚¿ÒÈ„§ˇˇˇË„‚Ë‚ªˇÊÊ
ˇˇˇÔË·õÁ‚˜ÎÎ‚Ë‚¿ÒÈ„§ÒÈ‰}ÙÍ‰0ÔﬂﬂË‚¸ÚÍ‚bË‚¿ÒÈ„§øøøÁ·¯ÒÁ„lË‚¿ÒÈ„§ÔÁ·_Ë‚ˇÂ‡2Ë‚¿ÒÈ„§ÚÍ‰_ÒË‚XÒÈ„\ÒË‚˘ÒÁ‚üË‚¿ÒÈ„§ˇË‚ûÒÈ‚˙ÔÊ„RÌÌÌÒË„mˇˇˇË‚¿ÒÈ„§ˇˇ™ÔË„£Ë‚˘ÚË·LÙÈﬁÚÊÊøøøÒË‚ßÒË‚˜ÒÊ‚GÔË‚NÒË‚∞ÒË‚∞ÒË‚∞ÒË‚∞ÒË‚∞ÒË‚∞ÒË‚∞ÒË‚∞ÒË‚∞ÚÈ„QˇˇˇÈ„´ÔÁ‚ˆÛÁ‰AÔË‚OÒË„≥ÒË„≥ÒË„≥ÒË„≥ÒË„≥ÒË„≥ÒË„≥ÒË„≥ÒË„≥Ë‚ÆˆÌÂˇˇˇÒË‚|ÔÁ·Äﬂﬂﬂ( @ ﬂﬂﬂË‡BÈ‚hÔË·nÔÈ„RÛËËË„fË‚…Ë‚…ÓÂ·;ËË—ÒÍ‰ÉË·ÔË‚ˇË‚ˇË‚ˇË‚ˇË‚¸Á‚≠ÒÍ„%ÒÈ„ÅË‚ˇË‚ˇÒÍ„JÓÊÊÒË‚‘Ë‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇÔË‚ÙÚË‚OÒÈ„ÅË‚ˇË‚ˇÒÍ„JÓ››ÒÈ„ÿË‚ˇË‚ˇÁ·˘ÔË·§Ë„fÔÁ·_ÓÁ‚ãÒÈ‚ÊË‚ˇË‚ˇÒË‚˘ÛÍ‚>ÒÈ„ÅË‚ˇË‚ˇÒÍ„JÒÈ‚îË‚ˇË‚ˇË‚⁄ÏÊ‡)ÍÍÍË‚ßË‚ˇË‚ˇË‚ﬁˇˇ€ÒÈ„ÅË‚ˇË‚ˇÒÍ„JÔÔÔÒË‚¯Ë‚ˇÔË‚ÛË·"ˇˇˇÔÁ‚¬Ë‚ˇË‚ˇÚÍ‰_ÒÈ„ÅË‚ˇË‚ˇÒÍ„JË‰{Ë‚ˇÈ‚åÓÊ‚=Ë‚ˇË‚ˇË‚ØÒÈ„ÅË‚ˇË‚ˇÒÍ„JË‰{ÒÁ‚5ˇˇˇÔÁ‚ÙË‚ˇÒÈ„⁄ÒÈ„ÅË‚ˇË‚ˇÒÍ„JÒË‚ÂË‚ˇÔË‚‰ÒÈ„ÅË‚ˇË‚ˇÒÍ„JÌÌ€Ë‚¸Ë‚ˇÁ‚ÕÒÈ„ÅË‚ˇË‚ˇÒÍ„JÓÁ‚iË‚ˇË‚ˇÔÁ‚ìÒÈ„ÅË‚ˇË‚ˇÒÍ„JÒÍ„%ÒË„ÏË‚ˇË‚˛Ê·3ÒÈ„ÅË‚ˇË‚ˇÒÍ„JıÎÊ4ÚÈ‰9ˇˇˇÁ·UÒË‚ËË‚ˇË‚ˇÔË·£ÒÈ„ÅË‚ˇË‚ˇÒÍ„JÈ„SÔË‚ıË‚ÒÏ‚5ÌÁ·*Ë‚Ë‚ˇË‚ˇÁ‚ÕÌ€€ÒÈ„ÅË‚ˇË‚ˇÒÍ„JˇÄÄÒÈ„∂Ë‚ˇË‚ˇÒË‚ÌÔÂ‡1ÒË‰8Ë‚ÒÁ‚≠ÓÓÓÒÈ„ÅË‚ˇË‚ˇÒÍ„Jˇ„„	Ë·ºË‚ˇË‚ˇÁ‚ÎÓË‚,ÛÛËÒÈ„ÅË‚ˇË‚ˇÒÍ„JˇˇÊ
Ë„øË‚ˇË‚ˇË‚ËÚÊﬂ(ÒÈ„ÅË‚ˇË‚ˇÒÍ„JÍÍÍÔÁ‚√Ë‚ˇË‚ˇÈ‚‰ÒÍ„$ÔÊﬁÚÍÊ<ÚÍÊ<Ò„„Ì€€ÒË„∆Ë‚ˇË‚ˇË„·Ë‡!ÓÓ›ÒË„…Ë‚ˇË‚ˇË‚›ˆÌ‰Á·VÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÚÍÂaÛÁ·+··Ë‚ÃË‚ˇË‚ˇË‚⁄Î‚‚Ë„‡Ë‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ÏÙË„-Ú‰‰Ë‚–Ë‚ˇË‚ˇÒË‚’ÛËËË„‡Ë‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇÒË‚ËÚÏÊ(ÁÁ€ÔË‚”Ë‚ˇË‚ˇÔË‚“ÊÊŸÒÈ„[È‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÈ‚hÚË·MˇˇﬂÙÈﬁÙÈﬁÙÈﬁÊÊÊ
(0` ˇˇˇˇËËıÎ‡Ë·"ÒÍ„%ÒÍ„$ÓÊÊ‰‰◊øøøˇÎÎÒÁ„JÒÁ„JÒÁ„JÓÂ·;ˇˇ€ÔÁÁ È‰gÔÁ·°Ë‚ È„„È‚ÓË‚ÎÒÈ„ÿÒÈ„∂Ë‚ÖË‰B„„„	ÌÁ·+Ë‚ÌË‚ÌË‚ÌË‚ªÙÈﬁ‘‘‘ÔË‚bÒË‚÷Ë‚ˆË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚˝Á‚ÍÒÈ„§Î‚‚Ó„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡··ÔË·èË‚˚Ë‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇÔÁ‚·ÚÈ·;ˇˇˇÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡Ï„„Ë‚•Ë‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË„ÎË‚‹Ë‚·ÒË‚¯Ë‚ˇË‚ˇË‚ˇË‚ˇË‚ˇÁ‚„ÔÂ‚OˇˇˇÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ˇﬂﬂÈ·âÈ‚˙Ë‚ˇË‚ˇË‚ˇÒÈ„˚ÔË·ºÔÂ‚OÒÍ„$ÔÊÊË‡!ÎÂ2Ë‚ÜË‚ÔË‚ˇË‚ˇË‚ˇË‚˛Á·◊È‚#Ó„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ÚÌÂ:ÔË·Ë‚ˇË‚ˇË‚ˇÁ‚ÎÓÁ‚jˇˇˇË‡!ÔË·ΩË·˙Ë‚ˇË‚ˇË‚ˇË‚®ˇˇˇÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ˇˇˇÒÈ‚πË‚ˇË‚ˇË‚ˇÁ·‡ÔË‚NÈÈﬁË‚®Ë‚¸Ë‚ˇË‚ˇË‚¸ÒÊﬂGÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ÛÏÊ)ÒÈ„˚Ë‚ˇË‚ˇÒË‚¯Ë„xˇˇˇÛÊÊ)Ë„‡Ë‚ˇË‚ˇË‚ˇÈ‚∑ˇˇˇÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡Ë‰yÔË‚ÙË‚ˇË‚€ÔÁﬂ ÒÈ„ÄË‚ˇË‚ˇË‚ˇÁ‚·Î‰›&Ó„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ÊÊÊ
Í‰{ÔË‚ÙÚÍ„õˇˇˇË‡!Ë„¸Ë‚ˇË‚ˇÁ‚ÌÓÁ‡JÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ÊÊÊ
Ë‰yÛÁ‰AˇˇˇÁ‚„Ë‚ˇË‚ˇË‚ÙÚÍ‰_Ó„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ˇˇˇË‚—Ë‚ˇË‚ˇË‚ˆË„eÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ˇˇˇÒÈ‚ÊË‚ˇË‚ˇË„ÛÒÈ‰]Ó„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ÒÍ„%Ë‚˝Ë‚ˇË‚ˇË‚ÏÒÈ‚GÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ˇˇˇÚË„áË‚ˇË‚ˇË‚ˇË‚ﬁË‡!Ó„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ÒÁ‚5ÔÁ‚‚Ë‚ˇË‚ˇË‚ˇË‰®ˇ™™Ó„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ÛÁÁÁ‚∂Ë‚˝Ë‚ˇË‚ˇÒÈ„˝ÏÁ‚5Ó„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ˇˇˇˆÓÊ¯Î‰&ˇˇˇ„„„	ÛË‚,ÔÁ‚¡Ë‚ˇË‚ˇË‚ˇË‚˝Ë·òÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ˇˇˇË‰CÁ‚ÃË·œÌËﬂ8ˇˇˇÎÎÎÔÁ·ÄË·ÁË‚ˇË‚ˇË‚ˇË‚˛ÔÁ‚√ÔÊﬁÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ÚË·LË‚·Ë‚˛Ë‚˝Ë‚ÀË·"ˇˇ‘ÓË·yÁ‚˜Ë‚ˇË‚ˇË‚ˇÔÁ·‡ÌËﬂ8ÄÄÄÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ˇøøÒÈ‚ƒÒÈ„¸Ë‚ˇË‚ˇË‚ˇË·œÔÔﬁˇˇˇˇÔÁ‡çÒË‚˜Á·˘ÒÈ‰ÕÌÁ·*Ó„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ÒÍ„$Ë‚∫Ë‚˝Ë‚ˇË‚ˇË‚ˇÔË·ƒÓÈ„.‘‘‘ÚÈ„uÒÈ„ıÎÎÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ˇˇˇÚÎ‰&ÔË·œË‚ˇË‚ˇË‚ˇË‚˝Ë‚øÎÎ‚ˇˇˇˇˇˇÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ˆÌÌÔË‚—Ë‚˝Ë‚ˇË‚ˇË‚ˇÍ„øÙÈÈÓ„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ÌÁ·*ÔÈ‚¡È„˝Ë‚ˇË‚ˇË‚ˇÒÈ‚∑Ú‰›&Ó„ﬁ.Ë‚ˇË‚ˇË‚ˇË‚…ÎÎ‡ˇˇˇÓË„-ÒÁ‚÷Ë‚ˇË‚ˇË‚ˇË‚¸ÒË‚≤ÚÊÊÒÒ„Î„dÎ„dÎ„dÔË‚OÊÊÊ
ÒÍ„%Á‚ŸË‚˛Ë‚ˇË‚ˇË‚ˇÈ„≠ÒÒ„ÔÍ‡1Ë‚»Ë‚˛Ë‚ˇË‚ˇË‚ˇÈ„™ˆÓÊˇˇˇÊ‚4Á‚›Ë‚ˇË‚ˇË‚ˇÈ„˚ÒÈ„£ÔﬂﬂˇÍÍ˜ÔÊË‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!Ë‡!ÙÈﬁˇˇˇÓÈ„.ÔË·ﬂË‚˛Ë‚ˇË‚ˇË‚ˇË·öˇÌÌÍ‰UÒË„◊Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë„‡Ë·æÔÍ‰0ÒË‰8È„ŒË‚˛Ë‚ˇË‚ˇË‚ˇË‚úÍÍﬂÔÁ‚aÔË‚ıË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚˝Á‚¡ˆ„ŸˇˇˇÓÍ·<ÔÁ‚„Ë‚ˇË‚ˇË‚ˇË·˙ÒÈ‚ïˇÍÍÔÁ‚aÔË‚ıË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË‚ˇË„¿ÙÍﬂÌÈ‰9È‚‰Ë‚ˇË‚ˇË‚ˇË‚˝Ë„áËËËÒË‚XË‚ﬁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁË‚ÁÔÁ·†Î‚‚ÓÍ·<ÒË·íÁ‚ñÁ‚ñÁ‚ñÔÈ‚îÍÂ‡1ÎÎÎË!È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#È‚#ÔÁﬂ „„„	ˇˇˇ€€€ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂˇˇˇ
```
## ./package.json
```
{
  "name": "copy-hub-t3",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "build": "next build",
    "db:push": "dotenv drizzle-kit push:pg",
    "db:studio": "dotenv drizzle-kit studio",
    "dev": "next dev",
    "lint": "next lint",
    "start": "next start"
  },
  "dependencies": {
    "@auth/drizzle-adapter": "^0.3.7",
    "@azure/storage-blob": "^12.17.0",
    "@planetscale/database": "^1.11.0",
    "@radix-ui/react-icons": "^1.3.0",
    "@radix-ui/react-menubar": "^1.0.4",
    "@t3-oss/env-nextjs": "^0.7.0",
    "@tanstack/react-query": "^4.32.6",
    "@trpc/client": "^10.37.1",
    "@trpc/next": "^10.37.1",
    "@trpc/react-query": "^10.37.1",
    "@trpc/server": "^10.37.1",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.0.0",
    "drizzle-orm": "^0.28.5",
    "next": "^14.0.0",
    "next-auth": "^4.24.4",
    "next-themes": "^0.2.1",
    "pg": "^8.11.3",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "superjson": "^1.13.1",
    "survey-core": "^1.11.5",
    "survey-creator-react": "^1.11.5",
    "survey-react-ui": "^1.11.5",
    "tailwind-merge": "^2.0.0",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "@types/eslint": "^8.44.2",
    "@types/node": "^18.16.0",
    "@types/pg": "^8.10.9",
    "@types/react": "^18.2.33",
    "@types/react-dom": "^18.2.14",
    "@typescript-eslint/eslint-plugin": "^6.3.0",
    "@typescript-eslint/parser": "^6.3.0",
    "autoprefixer": "^10.4.14",
    "dotenv-cli": "^7.3.0",
    "drizzle-kit": "^0.19.13",
    "eslint": "^8.47.0",
    "eslint-config-next": "^14.0.0",
    "mysql2": "^3.6.1",
    "postcss": "^8.4.27",
    "prettier": "^3.0.0",
    "prettier-plugin-tailwindcss": "^0.5.1",
    "tailwindcss": "^3.3.3",
    "typescript": "^5.1.6"
  },
  "ct3aMetadata": {
    "initVersion": "7.23.2"
  },
  "packageManager": "npm@10.0.0"
}
```
## ./prettier.config.mjs
```
/** @type {import('prettier').Config & import('prettier-plugin-tailwindcss').options} */
const config = {
  plugins: ["prettier-plugin-tailwindcss"],
};

export default config;
```
```
## ./tailwind.config.ts
```
import { type Config } from "tailwindcss";
import { fontFamily } from "tailwindcss/defaultTheme";

export default {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      fontFamily: {
        sans: ["var(--font-sans)", ...fontFamily.sans],
      },
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;
```
## ./drizzle.config.ts
```
import { type Config } from "drizzle-kit";

import { env } from "~/env.mjs";

export default {
  schema: "./src/server/db/schema.ts",
  driver: "pg",
  verbose: true,
  dbCredentials: {
    connectionString: env.DATABASE_URL,
  },
  tablesFilter: ["copy_hub_t3_*"],
} satisfies Config;
```
## ./.env.prod
```
# Since the ".env" file is gitignored, you can use the ".env.example" file to
# build a new ".env" file when you clone the repo. Keep this file up-to-date
# when you add new variables to `.env`.

# This file will be committed to version control, so make sure not to have any
# secrets in it. If you are cloning this repo, create a copy of this file named
# ".env" and populate it with your secrets.

# When adding additional environment variables, the schema in "/src/env.mjs"
# should be updated accordingly.

# Drizzle
DATABASE_URL="postgres://user:password/postgres?schema=public&pgbouncer=true&sslmode=require"

# Next Auth
# openssl rand -base64 32
# https://next-auth.js.org/configuration/options#secret


# NEXTAUTH_SECRET=""
# NEXTAUTH_JWT_SECRET=""

NEXTAUTH_URL="http://localhost:3000"

# Next Auth Github Provider
GITHUB_CLIENT_ID=""
GITHUB_CLIENT_SECRET=""
```
## ./next.config.mjs
```
/**
 * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially useful
 * for Docker builds.
 */
await import("./src/env.mjs");

/** @type {import("next").NextConfig} */
const config = {};

export default config;
```
## ./.gitignore
```
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# database
/prisma/db.sqlite
/prisma/db.sqlite-journal

# next.js
/.next/
/out/
next-env.d.ts

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
# do not commit any .env files to git, except for the .env.example file. https://create.t3.gg/en/usage/env-variables#using-environment-variables
.env
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
```
## ./.env.example
```
# Since the ".env" file is gitignored, you can use the ".env.example" file to
# build a new ".env" file when you clone the repo. Keep this file up-to-date
# when you add new variables to `.env`.

# This file will be committed to version control, so make sure not to have any
# secrets in it. If you are cloning this repo, create a copy of this file named
# ".env" and populate it with your secrets.

# When adding additional environment variables, the schema in "/src/env.mjs"
# should be updated accordingly.

# Drizzle
DATABASE_URL="postgres://user:password/postgres?schema=public&pgbouncer=true&sslmode=require"

# Next Auth
# openssl rand -base64 32
# https://next-auth.js.org/configuration/options#secret


# NEXTAUTH_SECRET=""
# NEXTAUTH_JWT_SECRET=""

NEXTAUTH_URL="http://localhost:3000"

# Next Auth Github Provider
GITHUB_CLIENT_ID=""
GITHUB_CLIENT_SECRET=""
```
## ./postcss.config.cjs
```
const config = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

module.exports = config;
```
## ./tsconfig.json
```
{
  "compilerOptions": {
    /* Base Options: */
    "esModuleInterop": true,
    "skipLibCheck": true,
    "target": "es2022",
    "allowJs": true,
    "resolveJsonModule": true,
    "moduleDetection": "force",
    "isolatedModules": true,

    /* Strictness */
    "strict": true,
    "noUncheckedIndexedAccess": true,
    "checkJs": true,

    /* Bundled projects */
    "lib": ["dom", "dom.iterable", "ES2022"],
    "noEmit": true,
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "jsx": "preserve",
    "plugins": [{ "name": "next" }],
    "incremental": true,

    /* Path Aliases */
    "baseUrl": ".",
    "paths": {
      "~/*": ["./src/*"]
    }
  },
  "include": [
    ".eslintrc.cjs",
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    "**/*.cjs",
    "**/*.mjs",
    ".next/types/**/*.ts"
  ],
  "exclude": ["node_modules"]
}
```
## ./.env.local
```
# Since the ".env" file is gitignored, you can use the ".env.example" file to
# build a new ".env" file when you clone the repo. Keep this file up-to-date
# when you add new variables to `.env`.

# This file will be committed to version control, so make sure not to have any
# secrets in it. If you are cloning this repo, create a copy of this file named
# ".env" and populate it with your secrets.

# When adding additional environment variables, the schema in "/src/env.mjs"
# should be updated accordingly.

# Drizzle
DATABASE_URL="postgres://user:password/postgres?schema=public&pgbouncer=true&sslmode=require"

# Next Auth
# openssl rand -base64 32
# https://next-auth.js.org/configuration/options#secret

NEXTAUTH_SECRET="VZ2TAAVfpG5kpaoUsYJuSmPeKfC81NDY6DG4zCWlqIE="
NEXTAUTH_JWT_SECRET="DUG0Ij5AAzxPFux3szE0UKJyxforDBTjfLcw5yGizpU="

NEXTAUTH_URL="http://localhost:3000"

# Next Auth Github Provider
GITHUB_CLIENT_ID=""
GITHUB_CLIENT_SECRET=""
```
